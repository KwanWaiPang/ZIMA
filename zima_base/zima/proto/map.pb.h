// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/map.proto

#ifndef PROTOBUF_zima_2fproto_2fmap_2eproto__INCLUDED
#define PROTOBUF_zima_2fproto_2fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
namespace ZimaProto {
namespace Map {
class PCharGridMap2D;
class PCharGridMap2DDefaultTypeInternal;
extern PCharGridMap2DDefaultTypeInternal _PCharGridMap2D_default_instance_;
class PDynamicMap2DInfo;
class PDynamicMap2DInfoDefaultTypeInternal;
extern PDynamicMap2DInfoDefaultTypeInternal _PDynamicMap2DInfo_default_instance_;
class PMapCell;
class PMapCellDefaultTypeInternal;
extern PMapCellDefaultTypeInternal _PMapCell_default_instance_;
class PMapCellBound;
class PMapCellBoundDefaultTypeInternal;
extern PMapCellBoundDefaultTypeInternal _PMapCellBound_default_instance_;
class PMapPoint;
class PMapPointDefaultTypeInternal;
extern PMapPointDefaultTypeInternal _PMapPoint_default_instance_;
class PMapPointBound;
class PMapPointBoundDefaultTypeInternal;
extern PMapPointBoundDefaultTypeInternal _PMapPointBound_default_instance_;
class PMultiLayerCharGridMap2D;
class PMultiLayerCharGridMap2DDefaultTypeInternal;
extern PMultiLayerCharGridMap2DDefaultTypeInternal _PMultiLayerCharGridMap2D_default_instance_;
class PMultiLayerCharGridMap2D_MapDictEntry;
class PMultiLayerCharGridMap2D_MapDictEntryDefaultTypeInternal;
extern PMultiLayerCharGridMap2D_MapDictEntryDefaultTypeInternal _PMultiLayerCharGridMap2D_MapDictEntry_default_instance_;
class PSlamValueGridMap2D;
class PSlamValueGridMap2DDefaultTypeInternal;
extern PSlamValueGridMap2DDefaultTypeInternal _PSlamValueGridMap2D_default_instance_;
}  // namespace Map
}  // namespace ZimaProto

namespace ZimaProto {
namespace Map {

namespace protobuf_zima_2fproto_2fmap_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_zima_2fproto_2fmap_2eproto

// ===================================================================

class PMapCell : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PMapCell) */ {
 public:
  PMapCell();
  virtual ~PMapCell();

  PMapCell(const PMapCell& from);

  inline PMapCell& operator=(const PMapCell& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PMapCell(PMapCell&& from) noexcept
    : PMapCell() {
    *this = ::std::move(from);
  }

  inline PMapCell& operator=(PMapCell&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PMapCell& default_instance();

  static inline const PMapCell* internal_default_instance() {
    return reinterpret_cast<const PMapCell*>(
               &_PMapCell_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PMapCell* other);
  friend void swap(PMapCell& a, PMapCell& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PMapCell* New() const PROTOBUF_FINAL { return New(NULL); }

  PMapCell* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PMapCell& from);
  void MergeFrom(const PMapCell& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PMapCell* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  ::google::protobuf::int32 x() const;
  void set_x(::google::protobuf::int32 value);

  // int32 y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  ::google::protobuf::int32 y() const;
  void set_y(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PMapCell)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_;
  ::google::protobuf::int32 y_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PMapCellBound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PMapCellBound) */ {
 public:
  PMapCellBound();
  virtual ~PMapCellBound();

  PMapCellBound(const PMapCellBound& from);

  inline PMapCellBound& operator=(const PMapCellBound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PMapCellBound(PMapCellBound&& from) noexcept
    : PMapCellBound() {
    *this = ::std::move(from);
  }

  inline PMapCellBound& operator=(PMapCellBound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PMapCellBound& default_instance();

  static inline const PMapCellBound* internal_default_instance() {
    return reinterpret_cast<const PMapCellBound*>(
               &_PMapCellBound_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PMapCellBound* other);
  friend void swap(PMapCellBound& a, PMapCellBound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PMapCellBound* New() const PROTOBUF_FINAL { return New(NULL); }

  PMapCellBound* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PMapCellBound& from);
  void MergeFrom(const PMapCellBound& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PMapCellBound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // int32 x_min = 1;
  void clear_x_min();
  static const int kXMinFieldNumber = 1;
  ::google::protobuf::int32 x_min() const;
  void set_x_min(::google::protobuf::int32 value);

  // int32 x_max = 2;
  void clear_x_max();
  static const int kXMaxFieldNumber = 2;
  ::google::protobuf::int32 x_max() const;
  void set_x_max(::google::protobuf::int32 value);

  // int32 y_min = 3;
  void clear_y_min();
  static const int kYMinFieldNumber = 3;
  ::google::protobuf::int32 y_min() const;
  void set_y_min(::google::protobuf::int32 value);

  // int32 y_max = 4;
  void clear_y_max();
  static const int kYMaxFieldNumber = 4;
  ::google::protobuf::int32 y_max() const;
  void set_y_max(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PMapCellBound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::int32 x_min_;
  ::google::protobuf::int32 x_max_;
  ::google::protobuf::int32 y_min_;
  ::google::protobuf::int32 y_max_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PMapPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PMapPoint) */ {
 public:
  PMapPoint();
  virtual ~PMapPoint();

  PMapPoint(const PMapPoint& from);

  inline PMapPoint& operator=(const PMapPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PMapPoint(PMapPoint&& from) noexcept
    : PMapPoint() {
    *this = ::std::move(from);
  }

  inline PMapPoint& operator=(PMapPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PMapPoint& default_instance();

  static inline const PMapPoint* internal_default_instance() {
    return reinterpret_cast<const PMapPoint*>(
               &_PMapPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PMapPoint* other);
  friend void swap(PMapPoint& a, PMapPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PMapPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  PMapPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PMapPoint& from);
  void MergeFrom(const PMapPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PMapPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x = 1;
  void clear_x();
  static const int kXFieldNumber = 1;
  float x() const;
  void set_x(float value);

  // float y = 2;
  void clear_y();
  static const int kYFieldNumber = 2;
  float y() const;
  void set_y(float value);

  // float degree = 3;
  void clear_degree();
  static const int kDegreeFieldNumber = 3;
  float degree() const;
  void set_degree(float value);

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PMapPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_;
  float y_;
  float degree_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PMapPointBound : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PMapPointBound) */ {
 public:
  PMapPointBound();
  virtual ~PMapPointBound();

  PMapPointBound(const PMapPointBound& from);

  inline PMapPointBound& operator=(const PMapPointBound& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PMapPointBound(PMapPointBound&& from) noexcept
    : PMapPointBound() {
    *this = ::std::move(from);
  }

  inline PMapPointBound& operator=(PMapPointBound&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PMapPointBound& default_instance();

  static inline const PMapPointBound* internal_default_instance() {
    return reinterpret_cast<const PMapPointBound*>(
               &_PMapPointBound_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PMapPointBound* other);
  friend void swap(PMapPointBound& a, PMapPointBound& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PMapPointBound* New() const PROTOBUF_FINAL { return New(NULL); }

  PMapPointBound* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PMapPointBound& from);
  void MergeFrom(const PMapPointBound& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PMapPointBound* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // float x_min = 1;
  void clear_x_min();
  static const int kXMinFieldNumber = 1;
  float x_min() const;
  void set_x_min(float value);

  // float x_max = 2;
  void clear_x_max();
  static const int kXMaxFieldNumber = 2;
  float x_max() const;
  void set_x_max(float value);

  // float y_min = 3;
  void clear_y_min();
  static const int kYMinFieldNumber = 3;
  float y_min() const;
  void set_y_min(float value);

  // float y_max = 4;
  void clear_y_max();
  static const int kYMaxFieldNumber = 4;
  float y_max() const;
  void set_y_max(float value);

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PMapPointBound)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  float x_min_;
  float x_max_;
  float y_min_;
  float y_max_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PDynamicMap2DInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PDynamicMap2DInfo) */ {
 public:
  PDynamicMap2DInfo();
  virtual ~PDynamicMap2DInfo();

  PDynamicMap2DInfo(const PDynamicMap2DInfo& from);

  inline PDynamicMap2DInfo& operator=(const PDynamicMap2DInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PDynamicMap2DInfo(PDynamicMap2DInfo&& from) noexcept
    : PDynamicMap2DInfo() {
    *this = ::std::move(from);
  }

  inline PDynamicMap2DInfo& operator=(PDynamicMap2DInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PDynamicMap2DInfo& default_instance();

  static inline const PDynamicMap2DInfo* internal_default_instance() {
    return reinterpret_cast<const PDynamicMap2DInfo*>(
               &_PDynamicMap2DInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    4;

  void Swap(PDynamicMap2DInfo* other);
  friend void swap(PDynamicMap2DInfo& a, PDynamicMap2DInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PDynamicMap2DInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PDynamicMap2DInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PDynamicMap2DInfo& from);
  void MergeFrom(const PDynamicMap2DInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PDynamicMap2DInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string name = 1;
  void clear_name();
  static const int kNameFieldNumber = 1;
  const ::std::string& name() const;
  void set_name(const ::std::string& value);
  #if LANG_CXX11
  void set_name(::std::string&& value);
  #endif
  void set_name(const char* value);
  void set_name(const char* value, size_t size);
  ::std::string* mutable_name();
  ::std::string* release_name();
  void set_allocated_name(::std::string* name);

  // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
  bool has_x_min_y_max_cell() const;
  void clear_x_min_y_max_cell();
  static const int kXMinYMaxCellFieldNumber = 2;
  const ::ZimaProto::Map::PMapCell& x_min_y_max_cell() const;
  ::ZimaProto::Map::PMapCell* mutable_x_min_y_max_cell();
  ::ZimaProto::Map::PMapCell* release_x_min_y_max_cell();
  void set_allocated_x_min_y_max_cell(::ZimaProto::Map::PMapCell* x_min_y_max_cell);

  // float resolution = 3;
  void clear_resolution();
  static const int kResolutionFieldNumber = 3;
  float resolution() const;
  void set_resolution(float value);

  // int32 x_range = 4;
  void clear_x_range();
  static const int kXRangeFieldNumber = 4;
  ::google::protobuf::int32 x_range() const;
  void set_x_range(::google::protobuf::int32 value);

  // int32 y_range = 5;
  void clear_y_range();
  static const int kYRangeFieldNumber = 5;
  ::google::protobuf::int32 y_range() const;
  void set_y_range(::google::protobuf::int32 value);

  // int32 x_reserve_range = 6;
  void clear_x_reserve_range();
  static const int kXReserveRangeFieldNumber = 6;
  ::google::protobuf::int32 x_reserve_range() const;
  void set_x_reserve_range(::google::protobuf::int32 value);

  // int32 y_reserve_range = 7;
  void clear_y_reserve_range();
  static const int kYReserveRangeFieldNumber = 7;
  ::google::protobuf::int32 y_reserve_range() const;
  void set_y_reserve_range(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PDynamicMap2DInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr name_;
  ::ZimaProto::Map::PMapCell* x_min_y_max_cell_;
  float resolution_;
  ::google::protobuf::int32 x_range_;
  ::google::protobuf::int32 y_range_;
  ::google::protobuf::int32 x_reserve_range_;
  ::google::protobuf::int32 y_reserve_range_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PCharGridMap2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PCharGridMap2D) */ {
 public:
  PCharGridMap2D();
  virtual ~PCharGridMap2D();

  PCharGridMap2D(const PCharGridMap2D& from);

  inline PCharGridMap2D& operator=(const PCharGridMap2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PCharGridMap2D(PCharGridMap2D&& from) noexcept
    : PCharGridMap2D() {
    *this = ::std::move(from);
  }

  inline PCharGridMap2D& operator=(PCharGridMap2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PCharGridMap2D& default_instance();

  static inline const PCharGridMap2D* internal_default_instance() {
    return reinterpret_cast<const PCharGridMap2D*>(
               &_PCharGridMap2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    5;

  void Swap(PCharGridMap2D* other);
  friend void swap(PCharGridMap2D& a, PCharGridMap2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PCharGridMap2D* New() const PROTOBUF_FINAL { return New(NULL); }

  PCharGridMap2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PCharGridMap2D& from);
  void MergeFrom(const PCharGridMap2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PCharGridMap2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string data = 2;
  void clear_data();
  static const int kDataFieldNumber = 2;
  const ::std::string& data() const;
  void set_data(const ::std::string& value);
  #if LANG_CXX11
  void set_data(::std::string&& value);
  #endif
  void set_data(const char* value);
  void set_data(const char* value, size_t size);
  ::std::string* mutable_data();
  ::std::string* release_data();
  void set_allocated_data(::std::string* data);

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  bool has_map_info() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 1;
  const ::ZimaProto::Map::PDynamicMap2DInfo& map_info() const;
  ::ZimaProto::Map::PDynamicMap2DInfo* mutable_map_info();
  ::ZimaProto::Map::PDynamicMap2DInfo* release_map_info();
  void set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info);

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PCharGridMap2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr data_;
  ::ZimaProto::Map::PDynamicMap2DInfo* map_info_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PSlamValueGridMap2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PSlamValueGridMap2D) */ {
 public:
  PSlamValueGridMap2D();
  virtual ~PSlamValueGridMap2D();

  PSlamValueGridMap2D(const PSlamValueGridMap2D& from);

  inline PSlamValueGridMap2D& operator=(const PSlamValueGridMap2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PSlamValueGridMap2D(PSlamValueGridMap2D&& from) noexcept
    : PSlamValueGridMap2D() {
    *this = ::std::move(from);
  }

  inline PSlamValueGridMap2D& operator=(PSlamValueGridMap2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PSlamValueGridMap2D& default_instance();

  static inline const PSlamValueGridMap2D* internal_default_instance() {
    return reinterpret_cast<const PSlamValueGridMap2D*>(
               &_PSlamValueGridMap2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PSlamValueGridMap2D* other);
  friend void swap(PSlamValueGridMap2D& a, PSlamValueGridMap2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PSlamValueGridMap2D* New() const PROTOBUF_FINAL { return New(NULL); }

  PSlamValueGridMap2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PSlamValueGridMap2D& from);
  void MergeFrom(const PSlamValueGridMap2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PSlamValueGridMap2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 data = 2;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 2;
  ::google::protobuf::int32 data(int index) const;
  void set_data(int index, ::google::protobuf::int32 value);
  void add_data(::google::protobuf::int32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_data();

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  bool has_map_info() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 1;
  const ::ZimaProto::Map::PDynamicMap2DInfo& map_info() const;
  ::ZimaProto::Map::PDynamicMap2DInfo* mutable_map_info();
  ::ZimaProto::Map::PDynamicMap2DInfo* release_map_info();
  void set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info);

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PSlamValueGridMap2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > data_;
  mutable int _data_cached_byte_size_;
  ::ZimaProto::Map::PDynamicMap2DInfo* map_info_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------

class PMultiLayerCharGridMap2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.Map.PMultiLayerCharGridMap2D) */ {
 public:
  PMultiLayerCharGridMap2D();
  virtual ~PMultiLayerCharGridMap2D();

  PMultiLayerCharGridMap2D(const PMultiLayerCharGridMap2D& from);

  inline PMultiLayerCharGridMap2D& operator=(const PMultiLayerCharGridMap2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PMultiLayerCharGridMap2D(PMultiLayerCharGridMap2D&& from) noexcept
    : PMultiLayerCharGridMap2D() {
    *this = ::std::move(from);
  }

  inline PMultiLayerCharGridMap2D& operator=(PMultiLayerCharGridMap2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PMultiLayerCharGridMap2D& default_instance();

  static inline const PMultiLayerCharGridMap2D* internal_default_instance() {
    return reinterpret_cast<const PMultiLayerCharGridMap2D*>(
               &_PMultiLayerCharGridMap2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    8;

  void Swap(PMultiLayerCharGridMap2D* other);
  friend void swap(PMultiLayerCharGridMap2D& a, PMultiLayerCharGridMap2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PMultiLayerCharGridMap2D* New() const PROTOBUF_FINAL { return New(NULL); }

  PMultiLayerCharGridMap2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PMultiLayerCharGridMap2D& from);
  void MergeFrom(const PMultiLayerCharGridMap2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PMultiLayerCharGridMap2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
  int map_dict_size() const;
  void clear_map_dict();
  static const int kMapDictFieldNumber = 1;
  const ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >&
      map_dict() const;
  ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >*
      mutable_map_dict();

  // @@protoc_insertion_point(class_scope:ZimaProto.Map.PMultiLayerCharGridMap2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class PMultiLayerCharGridMap2D_MapDictEntry : public ::google::protobuf::internal::MapEntry<PMultiLayerCharGridMap2D_MapDictEntry, 
      ::std::string, ::ZimaProto::Map::PCharGridMap2D,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<PMultiLayerCharGridMap2D_MapDictEntry, 
      ::std::string, ::ZimaProto::Map::PCharGridMap2D,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    PMultiLayerCharGridMap2D_MapDictEntry();
    PMultiLayerCharGridMap2D_MapDictEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const PMultiLayerCharGridMap2D_MapDictEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_PMultiLayerCharGridMap2D_MapDictEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      PMultiLayerCharGridMap2D_MapDictEntry,
      ::std::string, ::ZimaProto::Map::PCharGridMap2D,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > map_dict_;
  private:
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fmap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PMapCell

// int32 x = 1;
inline void PMapCell::clear_x() {
  x_ = 0;
}
inline ::google::protobuf::int32 PMapCell::x() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCell.x)
  return x_;
}
inline void PMapCell::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCell.x)
}

// int32 y = 2;
inline void PMapCell::clear_y() {
  y_ = 0;
}
inline ::google::protobuf::int32 PMapCell::y() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCell.y)
  return y_;
}
inline void PMapCell::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCell.y)
}

// -------------------------------------------------------------------

// PMapCellBound

// int32 x_min = 1;
inline void PMapCellBound::clear_x_min() {
  x_min_ = 0;
}
inline ::google::protobuf::int32 PMapCellBound::x_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.x_min)
  return x_min_;
}
inline void PMapCellBound::set_x_min(::google::protobuf::int32 value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.x_min)
}

// int32 x_max = 2;
inline void PMapCellBound::clear_x_max() {
  x_max_ = 0;
}
inline ::google::protobuf::int32 PMapCellBound::x_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.x_max)
  return x_max_;
}
inline void PMapCellBound::set_x_max(::google::protobuf::int32 value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.x_max)
}

// int32 y_min = 3;
inline void PMapCellBound::clear_y_min() {
  y_min_ = 0;
}
inline ::google::protobuf::int32 PMapCellBound::y_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.y_min)
  return y_min_;
}
inline void PMapCellBound::set_y_min(::google::protobuf::int32 value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.y_min)
}

// int32 y_max = 4;
inline void PMapCellBound::clear_y_max() {
  y_max_ = 0;
}
inline ::google::protobuf::int32 PMapCellBound::y_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.y_max)
  return y_max_;
}
inline void PMapCellBound::set_y_max(::google::protobuf::int32 value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.y_max)
}

// -------------------------------------------------------------------

// PMapPoint

// float x = 1;
inline void PMapPoint::clear_x() {
  x_ = 0;
}
inline float PMapPoint::x() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPoint.x)
  return x_;
}
inline void PMapPoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPoint.x)
}

// float y = 2;
inline void PMapPoint::clear_y() {
  y_ = 0;
}
inline float PMapPoint::y() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPoint.y)
  return y_;
}
inline void PMapPoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPoint.y)
}

// float degree = 3;
inline void PMapPoint::clear_degree() {
  degree_ = 0;
}
inline float PMapPoint::degree() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPoint.degree)
  return degree_;
}
inline void PMapPoint::set_degree(float value) {
  
  degree_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPoint.degree)
}

// -------------------------------------------------------------------

// PMapPointBound

// float x_min = 1;
inline void PMapPointBound::clear_x_min() {
  x_min_ = 0;
}
inline float PMapPointBound::x_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.x_min)
  return x_min_;
}
inline void PMapPointBound::set_x_min(float value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.x_min)
}

// float x_max = 2;
inline void PMapPointBound::clear_x_max() {
  x_max_ = 0;
}
inline float PMapPointBound::x_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.x_max)
  return x_max_;
}
inline void PMapPointBound::set_x_max(float value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.x_max)
}

// float y_min = 3;
inline void PMapPointBound::clear_y_min() {
  y_min_ = 0;
}
inline float PMapPointBound::y_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.y_min)
  return y_min_;
}
inline void PMapPointBound::set_y_min(float value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.y_min)
}

// float y_max = 4;
inline void PMapPointBound::clear_y_max() {
  y_max_ = 0;
}
inline float PMapPointBound::y_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.y_max)
  return y_max_;
}
inline void PMapPointBound::set_y_max(float value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.y_max)
}

// -------------------------------------------------------------------

// PDynamicMap2DInfo

// string name = 1;
inline void PDynamicMap2DInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PDynamicMap2DInfo::name() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.name)
  return name_.GetNoArena();
}
inline void PDynamicMap2DInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.name)
}
#if LANG_CXX11
inline void PDynamicMap2DInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.Map.PDynamicMap2DInfo.name)
}
#endif
inline void PDynamicMap2DInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.Map.PDynamicMap2DInfo.name)
}
inline void PDynamicMap2DInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.Map.PDynamicMap2DInfo.name)
}
inline ::std::string* PDynamicMap2DInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PDynamicMap2DInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PDynamicMap2DInfo::release_name() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PDynamicMap2DInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PDynamicMap2DInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PDynamicMap2DInfo.name)
}

// .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
inline bool PDynamicMap2DInfo::has_x_min_y_max_cell() const {
  return this != internal_default_instance() && x_min_y_max_cell_ != NULL;
}
inline void PDynamicMap2DInfo::clear_x_min_y_max_cell() {
  if (GetArenaNoVirtual() == NULL && x_min_y_max_cell_ != NULL) delete x_min_y_max_cell_;
  x_min_y_max_cell_ = NULL;
}
inline const ::ZimaProto::Map::PMapCell& PDynamicMap2DInfo::x_min_y_max_cell() const {
  const ::ZimaProto::Map::PMapCell* p = x_min_y_max_cell_;
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapCell*>(
      &::ZimaProto::Map::_PMapCell_default_instance_);
}
inline ::ZimaProto::Map::PMapCell* PDynamicMap2DInfo::mutable_x_min_y_max_cell() {
  
  if (x_min_y_max_cell_ == NULL) {
    x_min_y_max_cell_ = new ::ZimaProto::Map::PMapCell;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
  return x_min_y_max_cell_;
}
inline ::ZimaProto::Map::PMapCell* PDynamicMap2DInfo::release_x_min_y_max_cell() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
  
  ::ZimaProto::Map::PMapCell* temp = x_min_y_max_cell_;
  x_min_y_max_cell_ = NULL;
  return temp;
}
inline void PDynamicMap2DInfo::set_allocated_x_min_y_max_cell(::ZimaProto::Map::PMapCell* x_min_y_max_cell) {
  delete x_min_y_max_cell_;
  x_min_y_max_cell_ = x_min_y_max_cell;
  if (x_min_y_max_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
}

// float resolution = 3;
inline void PDynamicMap2DInfo::clear_resolution() {
  resolution_ = 0;
}
inline float PDynamicMap2DInfo::resolution() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.resolution)
  return resolution_;
}
inline void PDynamicMap2DInfo::set_resolution(float value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.resolution)
}

// int32 x_range = 4;
inline void PDynamicMap2DInfo::clear_x_range() {
  x_range_ = 0;
}
inline ::google::protobuf::int32 PDynamicMap2DInfo::x_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.x_range)
  return x_range_;
}
inline void PDynamicMap2DInfo::set_x_range(::google::protobuf::int32 value) {
  
  x_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.x_range)
}

// int32 y_range = 5;
inline void PDynamicMap2DInfo::clear_y_range() {
  y_range_ = 0;
}
inline ::google::protobuf::int32 PDynamicMap2DInfo::y_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.y_range)
  return y_range_;
}
inline void PDynamicMap2DInfo::set_y_range(::google::protobuf::int32 value) {
  
  y_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.y_range)
}

// int32 x_reserve_range = 6;
inline void PDynamicMap2DInfo::clear_x_reserve_range() {
  x_reserve_range_ = 0;
}
inline ::google::protobuf::int32 PDynamicMap2DInfo::x_reserve_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.x_reserve_range)
  return x_reserve_range_;
}
inline void PDynamicMap2DInfo::set_x_reserve_range(::google::protobuf::int32 value) {
  
  x_reserve_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.x_reserve_range)
}

// int32 y_reserve_range = 7;
inline void PDynamicMap2DInfo::clear_y_reserve_range() {
  y_reserve_range_ = 0;
}
inline ::google::protobuf::int32 PDynamicMap2DInfo::y_reserve_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.y_reserve_range)
  return y_reserve_range_;
}
inline void PDynamicMap2DInfo::set_y_reserve_range(::google::protobuf::int32 value) {
  
  y_reserve_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.y_reserve_range)
}

// -------------------------------------------------------------------

// PCharGridMap2D

// .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
inline bool PCharGridMap2D::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
inline void PCharGridMap2D::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) delete map_info_;
  map_info_ = NULL;
}
inline const ::ZimaProto::Map::PDynamicMap2DInfo& PCharGridMap2D::map_info() const {
  const ::ZimaProto::Map::PDynamicMap2DInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PCharGridMap2D.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PDynamicMap2DInfo*>(
      &::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_);
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PCharGridMap2D::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PCharGridMap2D.map_info)
  return map_info_;
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PCharGridMap2D::release_map_info() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PCharGridMap2D.map_info)
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
inline void PCharGridMap2D::set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  delete map_info_;
  map_info_ = map_info;
  if (map_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PCharGridMap2D.map_info)
}

// string data = 2;
inline void PCharGridMap2D::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PCharGridMap2D::data() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PCharGridMap2D.data)
  return data_.GetNoArena();
}
inline void PCharGridMap2D::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PCharGridMap2D.data)
}
#if LANG_CXX11
inline void PCharGridMap2D::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.Map.PCharGridMap2D.data)
}
#endif
inline void PCharGridMap2D::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.Map.PCharGridMap2D.data)
}
inline void PCharGridMap2D::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.Map.PCharGridMap2D.data)
}
inline ::std::string* PCharGridMap2D::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PCharGridMap2D.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PCharGridMap2D::release_data() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PCharGridMap2D.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PCharGridMap2D::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PCharGridMap2D.data)
}

// -------------------------------------------------------------------

// PSlamValueGridMap2D

// .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
inline bool PSlamValueGridMap2D::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
inline void PSlamValueGridMap2D::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) delete map_info_;
  map_info_ = NULL;
}
inline const ::ZimaProto::Map::PDynamicMap2DInfo& PSlamValueGridMap2D::map_info() const {
  const ::ZimaProto::Map::PDynamicMap2DInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PSlamValueGridMap2D.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PDynamicMap2DInfo*>(
      &::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_);
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PSlamValueGridMap2D::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PSlamValueGridMap2D.map_info)
  return map_info_;
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PSlamValueGridMap2D::release_map_info() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PSlamValueGridMap2D.map_info)
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
inline void PSlamValueGridMap2D::set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  delete map_info_;
  map_info_ = map_info;
  if (map_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PSlamValueGridMap2D.map_info)
}

// repeated int32 data = 2;
inline int PSlamValueGridMap2D::data_size() const {
  return data_.size();
}
inline void PSlamValueGridMap2D::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::int32 PSlamValueGridMap2D::data(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PSlamValueGridMap2D.data)
  return data_.Get(index);
}
inline void PSlamValueGridMap2D::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PSlamValueGridMap2D.data)
}
inline void PSlamValueGridMap2D::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:ZimaProto.Map.PSlamValueGridMap2D.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSlamValueGridMap2D::data() const {
  // @@protoc_insertion_point(field_list:ZimaProto.Map.PSlamValueGridMap2D.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSlamValueGridMap2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.Map.PSlamValueGridMap2D.data)
  return &data_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PMultiLayerCharGridMap2D

// map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
inline int PMultiLayerCharGridMap2D::map_dict_size() const {
  return map_dict_.size();
}
inline void PMultiLayerCharGridMap2D::clear_map_dict() {
  map_dict_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >&
PMultiLayerCharGridMap2D::map_dict() const {
  // @@protoc_insertion_point(field_map:ZimaProto.Map.PMultiLayerCharGridMap2D.map_dict)
  return map_dict_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >*
PMultiLayerCharGridMap2D::mutable_map_dict() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.Map.PMultiLayerCharGridMap2D.map_dict)
  return map_dict_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace Map
}  // namespace ZimaProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zima_2fproto_2fmap_2eproto__INCLUDED
