// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zima/proto/map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZimaProto {
namespace Map {
class PMapCellDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PMapCell>
     _instance;
} _PMapCell_default_instance_;
class PMapCellBoundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PMapCellBound>
     _instance;
} _PMapCellBound_default_instance_;
class PMapPointDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PMapPoint>
     _instance;
} _PMapPoint_default_instance_;
class PMapPointBoundDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PMapPointBound>
     _instance;
} _PMapPointBound_default_instance_;
class PDynamicMap2DInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PDynamicMap2DInfo>
     _instance;
} _PDynamicMap2DInfo_default_instance_;
class PCharGridMap2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PCharGridMap2D>
     _instance;
} _PCharGridMap2D_default_instance_;
class PSlamValueGridMap2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PSlamValueGridMap2D>
     _instance;
} _PSlamValueGridMap2D_default_instance_;
class PMultiLayerCharGridMap2D_MapDictEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D_MapDictEntry>
     _instance;
} _PMultiLayerCharGridMap2D_MapDictEntry_default_instance_;
class PMultiLayerCharGridMap2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PMultiLayerCharGridMap2D>
     _instance;
} _PMultiLayerCharGridMap2D_default_instance_;

namespace protobuf_zima_2fproto_2fmap_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[9];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCell, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCell, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCell, y_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCellBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCellBound, x_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCellBound, x_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCellBound, y_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapCellBound, y_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPoint, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPoint, x_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPoint, y_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPoint, degree_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPointBound, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPointBound, x_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPointBound, x_max_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPointBound, y_min_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMapPointBound, y_max_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, name_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, x_min_y_max_cell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, resolution_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, x_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, y_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, x_reserve_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PDynamicMap2DInfo, y_reserve_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCharGridMap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCharGridMap2D, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PCharGridMap2D, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSlamValueGridMap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSlamValueGridMap2D, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PSlamValueGridMap2D, data_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMultiLayerCharGridMap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PMultiLayerCharGridMap2D, map_dict_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(PMapCell)},
  { 7, -1, sizeof(PMapCellBound)},
  { 16, -1, sizeof(PMapPoint)},
  { 24, -1, sizeof(PMapPointBound)},
  { 33, -1, sizeof(PDynamicMap2DInfo)},
  { 45, -1, sizeof(PCharGridMap2D)},
  { 52, -1, sizeof(PSlamValueGridMap2D)},
  { 59, -1, sizeof(PMultiLayerCharGridMap2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PMapCell_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PMapCellBound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PMapPoint_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PMapPointBound_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PDynamicMap2DInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PCharGridMap2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PSlamValueGridMap2D_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PMultiLayerCharGridMap2D_MapDictEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PMultiLayerCharGridMap2D_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zima/proto/map.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
file_level_metadata[7].reflection = PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D_MapDictEntry::CreateReflection(file_level_metadata[7].descriptor, _PMultiLayerCharGridMap2D_MapDictEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 9);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  _PMapCell_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PMapCell_default_instance_);_PMapCellBound_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PMapCellBound_default_instance_);_PMapPoint_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PMapPoint_default_instance_);_PMapPointBound_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PMapPointBound_default_instance_);_PDynamicMap2DInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PDynamicMap2DInfo_default_instance_);_PCharGridMap2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PCharGridMap2D_default_instance_);_PSlamValueGridMap2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PSlamValueGridMap2D_default_instance_);_PMultiLayerCharGridMap2D_MapDictEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PMultiLayerCharGridMap2D_MapDictEntry_default_instance_);_PMultiLayerCharGridMap2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PMultiLayerCharGridMap2D_default_instance_);_PDynamicMap2DInfo_default_instance_._instance.get_mutable()->x_min_y_max_cell_ = const_cast< ::ZimaProto::Map::PMapCell*>(
      ::ZimaProto::Map::PMapCell::internal_default_instance());
  _PCharGridMap2D_default_instance_._instance.get_mutable()->map_info_ = const_cast< ::ZimaProto::Map::PDynamicMap2DInfo*>(
      ::ZimaProto::Map::PDynamicMap2DInfo::internal_default_instance());
  _PSlamValueGridMap2D_default_instance_._instance.get_mutable()->map_info_ = const_cast< ::ZimaProto::Map::PDynamicMap2DInfo*>(
      ::ZimaProto::Map::PDynamicMap2DInfo::internal_default_instance());
  _PMultiLayerCharGridMap2D_MapDictEntry_default_instance_._instance.get_mutable()->set_default_instance(_PMultiLayerCharGridMap2D_MapDictEntry_default_instance_._instance.get_mutable());
  _PMultiLayerCharGridMap2D_MapDictEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\024zima/proto/map.proto\022\rZimaProto.Map\" \n"
      "\010PMapCell\022\t\n\001x\030\001 \001(\005\022\t\n\001y\030\002 \001(\005\"K\n\rPMapC"
      "ellBound\022\r\n\005x_min\030\001 \001(\005\022\r\n\005x_max\030\002 \001(\005\022\r"
      "\n\005y_min\030\003 \001(\005\022\r\n\005y_max\030\004 \001(\005\"1\n\tPMapPoin"
      "t\022\t\n\001x\030\001 \001(\002\022\t\n\001y\030\002 \001(\002\022\016\n\006degree\030\003 \001(\002\""
      "L\n\016PMapPointBound\022\r\n\005x_min\030\001 \001(\002\022\r\n\005x_ma"
      "x\030\002 \001(\002\022\r\n\005y_min\030\003 \001(\002\022\r\n\005y_max\030\004 \001(\002\"\274\001"
      "\n\021PDynamicMap2DInfo\022\014\n\004name\030\001 \001(\t\0221\n\020x_m"
      "in_y_max_cell\030\002 \001(\0132\027.ZimaProto.Map.PMap"
      "Cell\022\022\n\nresolution\030\003 \001(\002\022\017\n\007x_range\030\004 \001("
      "\005\022\017\n\007y_range\030\005 \001(\005\022\027\n\017x_reserve_range\030\006 "
      "\001(\005\022\027\n\017y_reserve_range\030\007 \001(\005\"R\n\016PCharGri"
      "dMap2D\0222\n\010map_info\030\001 \001(\0132 .ZimaProto.Map"
      ".PDynamicMap2DInfo\022\014\n\004data\030\002 \001(\t\"W\n\023PSla"
      "mValueGridMap2D\0222\n\010map_info\030\001 \001(\0132 .Zima"
      "Proto.Map.PDynamicMap2DInfo\022\014\n\004data\030\002 \003("
      "\005\"\261\001\n\030PMultiLayerCharGridMap2D\022F\n\010map_di"
      "ct\030\001 \003(\01324.ZimaProto.Map.PMultiLayerChar"
      "GridMap2D.MapDictEntry\032M\n\014MapDictEntry\022\013"
      "\n\003key\030\001 \001(\t\022,\n\005value\030\002 \001(\0132\035.ZimaProto.M"
      "ap.PCharGridMap2D:\0028\001b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 829);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zima/proto/map.proto", &protobuf_RegisterTypes);
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zima_2fproto_2fmap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PMapCell::kXFieldNumber;
const int PMapCell::kYFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PMapCell::PMapCell()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PMapCell)
}
PMapCell::PMapCell(const PMapCell& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapCell)
}

void PMapCell::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _cached_size_ = 0;
}

PMapCell::~PMapCell() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapCell)
  SharedDtor();
}

void PMapCell::SharedDtor() {
}

void PMapCell::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMapCell::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PMapCell& PMapCell::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PMapCell* PMapCell::New(::google::protobuf::Arena* arena) const {
  PMapCell* n = new PMapCell;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PMapCell::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapCell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear();
}

bool PMapCell::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PMapCell)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PMapCell)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PMapCell)
  return false;
#undef DO_
}

void PMapCell::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PMapCell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x(), output);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->y(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PMapCell)
}

::google::protobuf::uint8* PMapCell::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapCell)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x(), target);
  }

  // int32 y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->y(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapCell)
  return target;
}

size_t PMapCell::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapCell)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x = 1;
  if (this->x() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x());
  }

  // int32 y = 2;
  if (this->y() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMapCell::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PMapCell)
  GOOGLE_DCHECK_NE(&from, this);
  const PMapCell* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PMapCell>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PMapCell)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PMapCell)
    MergeFrom(*source);
  }
}

void PMapCell::MergeFrom(const PMapCell& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapCell)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
}

void PMapCell::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PMapCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMapCell::CopyFrom(const PMapCell& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapCell)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapCell::IsInitialized() const {
  return true;
}

void PMapCell::Swap(PMapCell* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PMapCell::InternalSwap(PMapCell* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PMapCell::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PMapCell

// int32 x = 1;
void PMapCell::clear_x() {
  x_ = 0;
}
::google::protobuf::int32 PMapCell::x() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCell.x)
  return x_;
}
void PMapCell::set_x(::google::protobuf::int32 value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCell.x)
}

// int32 y = 2;
void PMapCell::clear_y() {
  y_ = 0;
}
::google::protobuf::int32 PMapCell::y() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCell.y)
  return y_;
}
void PMapCell::set_y(::google::protobuf::int32 value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCell.y)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PMapCellBound::kXMinFieldNumber;
const int PMapCellBound::kXMaxFieldNumber;
const int PMapCellBound::kYMinFieldNumber;
const int PMapCellBound::kYMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PMapCellBound::PMapCellBound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PMapCellBound)
}
PMapCellBound::PMapCellBound(const PMapCellBound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_max_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapCellBound)
}

void PMapCellBound::SharedCtor() {
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _cached_size_ = 0;
}

PMapCellBound::~PMapCellBound() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapCellBound)
  SharedDtor();
}

void PMapCellBound::SharedDtor() {
}

void PMapCellBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMapCellBound::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PMapCellBound& PMapCellBound::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PMapCellBound* PMapCellBound::New(::google::protobuf::Arena* arena) const {
  PMapCellBound* n = new PMapCellBound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PMapCellBound::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapCellBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _internal_metadata_.Clear();
}

bool PMapCellBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PMapCellBound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // int32 x_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PMapCellBound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PMapCellBound)
  return false;
#undef DO_
}

void PMapCellBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PMapCellBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_min = 1;
  if (this->x_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->x_min(), output);
  }

  // int32 x_max = 2;
  if (this->x_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->x_max(), output);
  }

  // int32 y_min = 3;
  if (this->y_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->y_min(), output);
  }

  // int32 y_max = 4;
  if (this->y_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->y_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PMapCellBound)
}

::google::protobuf::uint8* PMapCellBound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapCellBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 x_min = 1;
  if (this->x_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->x_min(), target);
  }

  // int32 x_max = 2;
  if (this->x_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->x_max(), target);
  }

  // int32 y_min = 3;
  if (this->y_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->y_min(), target);
  }

  // int32 y_max = 4;
  if (this->y_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->y_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapCellBound)
  return target;
}

size_t PMapCellBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapCellBound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // int32 x_min = 1;
  if (this->x_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_min());
  }

  // int32 x_max = 2;
  if (this->x_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_max());
  }

  // int32 y_min = 3;
  if (this->y_min() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_min());
  }

  // int32 y_max = 4;
  if (this->y_max() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_max());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMapCellBound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PMapCellBound)
  GOOGLE_DCHECK_NE(&from, this);
  const PMapCellBound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PMapCellBound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PMapCellBound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PMapCellBound)
    MergeFrom(*source);
  }
}

void PMapCellBound::MergeFrom(const PMapCellBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapCellBound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_min() != 0) {
    set_x_min(from.x_min());
  }
  if (from.x_max() != 0) {
    set_x_max(from.x_max());
  }
  if (from.y_min() != 0) {
    set_y_min(from.y_min());
  }
  if (from.y_max() != 0) {
    set_y_max(from.y_max());
  }
}

void PMapCellBound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PMapCellBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMapCellBound::CopyFrom(const PMapCellBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapCellBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapCellBound::IsInitialized() const {
  return true;
}

void PMapCellBound::Swap(PMapCellBound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PMapCellBound::InternalSwap(PMapCellBound* other) {
  using std::swap;
  swap(x_min_, other->x_min_);
  swap(x_max_, other->x_max_);
  swap(y_min_, other->y_min_);
  swap(y_max_, other->y_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PMapCellBound::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PMapCellBound

// int32 x_min = 1;
void PMapCellBound::clear_x_min() {
  x_min_ = 0;
}
::google::protobuf::int32 PMapCellBound::x_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.x_min)
  return x_min_;
}
void PMapCellBound::set_x_min(::google::protobuf::int32 value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.x_min)
}

// int32 x_max = 2;
void PMapCellBound::clear_x_max() {
  x_max_ = 0;
}
::google::protobuf::int32 PMapCellBound::x_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.x_max)
  return x_max_;
}
void PMapCellBound::set_x_max(::google::protobuf::int32 value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.x_max)
}

// int32 y_min = 3;
void PMapCellBound::clear_y_min() {
  y_min_ = 0;
}
::google::protobuf::int32 PMapCellBound::y_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.y_min)
  return y_min_;
}
void PMapCellBound::set_y_min(::google::protobuf::int32 value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.y_min)
}

// int32 y_max = 4;
void PMapCellBound::clear_y_max() {
  y_max_ = 0;
}
::google::protobuf::int32 PMapCellBound::y_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapCellBound.y_max)
  return y_max_;
}
void PMapCellBound::set_y_max(::google::protobuf::int32 value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapCellBound.y_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PMapPoint::kXFieldNumber;
const int PMapPoint::kYFieldNumber;
const int PMapPoint::kDegreeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PMapPoint::PMapPoint()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PMapPoint)
}
PMapPoint::PMapPoint(const PMapPoint& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&degree_) -
    reinterpret_cast<char*>(&x_)) + sizeof(degree_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapPoint)
}

void PMapPoint::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&degree_) -
      reinterpret_cast<char*>(&x_)) + sizeof(degree_));
  _cached_size_ = 0;
}

PMapPoint::~PMapPoint() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapPoint)
  SharedDtor();
}

void PMapPoint::SharedDtor() {
}

void PMapPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMapPoint::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PMapPoint& PMapPoint::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PMapPoint* PMapPoint::New(::google::protobuf::Arena* arena) const {
  PMapPoint* n = new PMapPoint;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PMapPoint::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&degree_) -
      reinterpret_cast<char*>(&x_)) + sizeof(degree_));
  _internal_metadata_.Clear();
}

bool PMapPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PMapPoint)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float degree = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &degree_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PMapPoint)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PMapPoint)
  return false;
#undef DO_
}

void PMapPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PMapPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x(), output);
  }

  // float y = 2;
  if (this->y() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->y(), output);
  }

  // float degree = 3;
  if (this->degree() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->degree(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PMapPoint)
}

::google::protobuf::uint8* PMapPoint::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapPoint)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (this->x() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x(), target);
  }

  // float y = 2;
  if (this->y() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->y(), target);
  }

  // float degree = 3;
  if (this->degree() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->degree(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapPoint)
  return target;
}

size_t PMapPoint::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapPoint)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x = 1;
  if (this->x() != 0) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (this->y() != 0) {
    total_size += 1 + 4;
  }

  // float degree = 3;
  if (this->degree() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMapPoint::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PMapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  const PMapPoint* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PMapPoint>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PMapPoint)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PMapPoint)
    MergeFrom(*source);
  }
}

void PMapPoint::MergeFrom(const PMapPoint& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapPoint)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x() != 0) {
    set_x(from.x());
  }
  if (from.y() != 0) {
    set_y(from.y());
  }
  if (from.degree() != 0) {
    set_degree(from.degree());
  }
}

void PMapPoint::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PMapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMapPoint::CopyFrom(const PMapPoint& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapPoint)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapPoint::IsInitialized() const {
  return true;
}

void PMapPoint::Swap(PMapPoint* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PMapPoint::InternalSwap(PMapPoint* other) {
  using std::swap;
  swap(x_, other->x_);
  swap(y_, other->y_);
  swap(degree_, other->degree_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PMapPoint::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PMapPoint

// float x = 1;
void PMapPoint::clear_x() {
  x_ = 0;
}
float PMapPoint::x() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPoint.x)
  return x_;
}
void PMapPoint::set_x(float value) {
  
  x_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPoint.x)
}

// float y = 2;
void PMapPoint::clear_y() {
  y_ = 0;
}
float PMapPoint::y() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPoint.y)
  return y_;
}
void PMapPoint::set_y(float value) {
  
  y_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPoint.y)
}

// float degree = 3;
void PMapPoint::clear_degree() {
  degree_ = 0;
}
float PMapPoint::degree() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPoint.degree)
  return degree_;
}
void PMapPoint::set_degree(float value) {
  
  degree_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPoint.degree)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PMapPointBound::kXMinFieldNumber;
const int PMapPointBound::kXMaxFieldNumber;
const int PMapPointBound::kYMinFieldNumber;
const int PMapPointBound::kYMaxFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PMapPointBound::PMapPointBound()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PMapPointBound)
}
PMapPointBound::PMapPointBound(const PMapPointBound& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::memcpy(&x_min_, &from.x_min_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_max_) -
    reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMapPointBound)
}

void PMapPointBound::SharedCtor() {
  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _cached_size_ = 0;
}

PMapPointBound::~PMapPointBound() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMapPointBound)
  SharedDtor();
}

void PMapPointBound::SharedDtor() {
}

void PMapPointBound::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMapPointBound::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PMapPointBound& PMapPointBound::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PMapPointBound* PMapPointBound::New(::google::protobuf::Arena* arena) const {
  PMapPointBound* n = new PMapPointBound;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PMapPointBound::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMapPointBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_min_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_max_) -
      reinterpret_cast<char*>(&x_min_)) + sizeof(y_max_));
  _internal_metadata_.Clear();
}

bool PMapPointBound::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PMapPointBound)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // float x_min = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(13u /* 13 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float x_max = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &x_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_min = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_min_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float y_max = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &y_max_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PMapPointBound)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PMapPointBound)
  return false;
#undef DO_
}

void PMapPointBound::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PMapPointBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_min = 1;
  if (this->x_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(1, this->x_min(), output);
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->x_max(), output);
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->y_min(), output);
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->y_max(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PMapPointBound)
}

::google::protobuf::uint8* PMapPointBound::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMapPointBound)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x_min = 1;
  if (this->x_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(1, this->x_min(), target);
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->x_max(), target);
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->y_min(), target);
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->y_max(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMapPointBound)
  return target;
}

size_t PMapPointBound::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMapPointBound)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // float x_min = 1;
  if (this->x_min() != 0) {
    total_size += 1 + 4;
  }

  // float x_max = 2;
  if (this->x_max() != 0) {
    total_size += 1 + 4;
  }

  // float y_min = 3;
  if (this->y_min() != 0) {
    total_size += 1 + 4;
  }

  // float y_max = 4;
  if (this->y_max() != 0) {
    total_size += 1 + 4;
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMapPointBound::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PMapPointBound)
  GOOGLE_DCHECK_NE(&from, this);
  const PMapPointBound* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PMapPointBound>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PMapPointBound)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PMapPointBound)
    MergeFrom(*source);
  }
}

void PMapPointBound::MergeFrom(const PMapPointBound& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMapPointBound)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.x_min() != 0) {
    set_x_min(from.x_min());
  }
  if (from.x_max() != 0) {
    set_x_max(from.x_max());
  }
  if (from.y_min() != 0) {
    set_y_min(from.y_min());
  }
  if (from.y_max() != 0) {
    set_y_max(from.y_max());
  }
}

void PMapPointBound::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PMapPointBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMapPointBound::CopyFrom(const PMapPointBound& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMapPointBound)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMapPointBound::IsInitialized() const {
  return true;
}

void PMapPointBound::Swap(PMapPointBound* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PMapPointBound::InternalSwap(PMapPointBound* other) {
  using std::swap;
  swap(x_min_, other->x_min_);
  swap(x_max_, other->x_max_);
  swap(y_min_, other->y_min_);
  swap(y_max_, other->y_max_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PMapPointBound::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PMapPointBound

// float x_min = 1;
void PMapPointBound::clear_x_min() {
  x_min_ = 0;
}
float PMapPointBound::x_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.x_min)
  return x_min_;
}
void PMapPointBound::set_x_min(float value) {
  
  x_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.x_min)
}

// float x_max = 2;
void PMapPointBound::clear_x_max() {
  x_max_ = 0;
}
float PMapPointBound::x_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.x_max)
  return x_max_;
}
void PMapPointBound::set_x_max(float value) {
  
  x_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.x_max)
}

// float y_min = 3;
void PMapPointBound::clear_y_min() {
  y_min_ = 0;
}
float PMapPointBound::y_min() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.y_min)
  return y_min_;
}
void PMapPointBound::set_y_min(float value) {
  
  y_min_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.y_min)
}

// float y_max = 4;
void PMapPointBound::clear_y_max() {
  y_max_ = 0;
}
float PMapPointBound::y_max() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PMapPointBound.y_max)
  return y_max_;
}
void PMapPointBound::set_y_max(float value) {
  
  y_max_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PMapPointBound.y_max)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PDynamicMap2DInfo::kNameFieldNumber;
const int PDynamicMap2DInfo::kXMinYMaxCellFieldNumber;
const int PDynamicMap2DInfo::kResolutionFieldNumber;
const int PDynamicMap2DInfo::kXRangeFieldNumber;
const int PDynamicMap2DInfo::kYRangeFieldNumber;
const int PDynamicMap2DInfo::kXReserveRangeFieldNumber;
const int PDynamicMap2DInfo::kYReserveRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PDynamicMap2DInfo::PDynamicMap2DInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PDynamicMap2DInfo)
}
PDynamicMap2DInfo::PDynamicMap2DInfo(const PDynamicMap2DInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.name().size() > 0) {
    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_x_min_y_max_cell()) {
    x_min_y_max_cell_ = new ::ZimaProto::Map::PMapCell(*from.x_min_y_max_cell_);
  } else {
    x_min_y_max_cell_ = NULL;
  }
  ::memcpy(&resolution_, &from.resolution_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_reserve_range_) -
    reinterpret_cast<char*>(&resolution_)) + sizeof(y_reserve_range_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PDynamicMap2DInfo)
}

void PDynamicMap2DInfo::SharedCtor() {
  name_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&x_min_y_max_cell_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_reserve_range_) -
      reinterpret_cast<char*>(&x_min_y_max_cell_)) + sizeof(y_reserve_range_));
  _cached_size_ = 0;
}

PDynamicMap2DInfo::~PDynamicMap2DInfo() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PDynamicMap2DInfo)
  SharedDtor();
}

void PDynamicMap2DInfo::SharedDtor() {
  name_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete x_min_y_max_cell_;
}

void PDynamicMap2DInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PDynamicMap2DInfo::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PDynamicMap2DInfo& PDynamicMap2DInfo::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PDynamicMap2DInfo* PDynamicMap2DInfo::New(::google::protobuf::Arena* arena) const {
  PDynamicMap2DInfo* n = new PDynamicMap2DInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PDynamicMap2DInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PDynamicMap2DInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && x_min_y_max_cell_ != NULL) {
    delete x_min_y_max_cell_;
  }
  x_min_y_max_cell_ = NULL;
  ::memset(&resolution_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_reserve_range_) -
      reinterpret_cast<char*>(&resolution_)) + sizeof(y_reserve_range_));
  _internal_metadata_.Clear();
}

bool PDynamicMap2DInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PDynamicMap2DInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string name = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->name().data(), static_cast<int>(this->name().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.Map.PDynamicMap2DInfo.name"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_x_min_y_max_cell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float resolution = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &resolution_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 x_reserve_range = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &x_reserve_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // int32 y_reserve_range = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &y_reserve_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PDynamicMap2DInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PDynamicMap2DInfo)
  return false;
#undef DO_
}

void PDynamicMap2DInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PDynamicMap2DInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.Map.PDynamicMap2DInfo.name");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->name(), output);
  }

  // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
  if (this->has_x_min_y_max_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->x_min_y_max_cell_, output);
  }

  // float resolution = 3;
  if (this->resolution() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->resolution(), output);
  }

  // int32 x_range = 4;
  if (this->x_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->x_range(), output);
  }

  // int32 y_range = 5;
  if (this->y_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->y_range(), output);
  }

  // int32 x_reserve_range = 6;
  if (this->x_reserve_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->x_reserve_range(), output);
  }

  // int32 y_reserve_range = 7;
  if (this->y_reserve_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->y_reserve_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PDynamicMap2DInfo)
}

::google::protobuf::uint8* PDynamicMap2DInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PDynamicMap2DInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string name = 1;
  if (this->name().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->name().data(), static_cast<int>(this->name().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.Map.PDynamicMap2DInfo.name");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->name(), target);
  }

  // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
  if (this->has_x_min_y_max_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->x_min_y_max_cell_, deterministic, target);
  }

  // float resolution = 3;
  if (this->resolution() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->resolution(), target);
  }

  // int32 x_range = 4;
  if (this->x_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->x_range(), target);
  }

  // int32 y_range = 5;
  if (this->y_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->y_range(), target);
  }

  // int32 x_reserve_range = 6;
  if (this->x_reserve_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->x_reserve_range(), target);
  }

  // int32 y_reserve_range = 7;
  if (this->y_reserve_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->y_reserve_range(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PDynamicMap2DInfo)
  return target;
}

size_t PDynamicMap2DInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PDynamicMap2DInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string name = 1;
  if (this->name().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->name());
  }

  // .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
  if (this->has_x_min_y_max_cell()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->x_min_y_max_cell_);
  }

  // float resolution = 3;
  if (this->resolution() != 0) {
    total_size += 1 + 4;
  }

  // int32 x_range = 4;
  if (this->x_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_range());
  }

  // int32 y_range = 5;
  if (this->y_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_range());
  }

  // int32 x_reserve_range = 6;
  if (this->x_reserve_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->x_reserve_range());
  }

  // int32 y_reserve_range = 7;
  if (this->y_reserve_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::Int32Size(
        this->y_reserve_range());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PDynamicMap2DInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PDynamicMap2DInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PDynamicMap2DInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PDynamicMap2DInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PDynamicMap2DInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PDynamicMap2DInfo)
    MergeFrom(*source);
  }
}

void PDynamicMap2DInfo::MergeFrom(const PDynamicMap2DInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PDynamicMap2DInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.name().size() > 0) {

    name_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.name_);
  }
  if (from.has_x_min_y_max_cell()) {
    mutable_x_min_y_max_cell()->::ZimaProto::Map::PMapCell::MergeFrom(from.x_min_y_max_cell());
  }
  if (from.resolution() != 0) {
    set_resolution(from.resolution());
  }
  if (from.x_range() != 0) {
    set_x_range(from.x_range());
  }
  if (from.y_range() != 0) {
    set_y_range(from.y_range());
  }
  if (from.x_reserve_range() != 0) {
    set_x_reserve_range(from.x_reserve_range());
  }
  if (from.y_reserve_range() != 0) {
    set_y_reserve_range(from.y_reserve_range());
  }
}

void PDynamicMap2DInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PDynamicMap2DInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PDynamicMap2DInfo::CopyFrom(const PDynamicMap2DInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PDynamicMap2DInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PDynamicMap2DInfo::IsInitialized() const {
  return true;
}

void PDynamicMap2DInfo::Swap(PDynamicMap2DInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PDynamicMap2DInfo::InternalSwap(PDynamicMap2DInfo* other) {
  using std::swap;
  name_.Swap(&other->name_);
  swap(x_min_y_max_cell_, other->x_min_y_max_cell_);
  swap(resolution_, other->resolution_);
  swap(x_range_, other->x_range_);
  swap(y_range_, other->y_range_);
  swap(x_reserve_range_, other->x_reserve_range_);
  swap(y_reserve_range_, other->y_reserve_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PDynamicMap2DInfo::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PDynamicMap2DInfo

// string name = 1;
void PDynamicMap2DInfo::clear_name() {
  name_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PDynamicMap2DInfo::name() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.name)
  return name_.GetNoArena();
}
void PDynamicMap2DInfo::set_name(const ::std::string& value) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.name)
}
#if LANG_CXX11
void PDynamicMap2DInfo::set_name(::std::string&& value) {
  
  name_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.Map.PDynamicMap2DInfo.name)
}
#endif
void PDynamicMap2DInfo::set_name(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.Map.PDynamicMap2DInfo.name)
}
void PDynamicMap2DInfo::set_name(const char* value, size_t size) {
  
  name_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.Map.PDynamicMap2DInfo.name)
}
::std::string* PDynamicMap2DInfo::mutable_name() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PDynamicMap2DInfo.name)
  return name_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PDynamicMap2DInfo::release_name() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PDynamicMap2DInfo.name)
  
  return name_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PDynamicMap2DInfo::set_allocated_name(::std::string* name) {
  if (name != NULL) {
    
  } else {
    
  }
  name_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), name);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PDynamicMap2DInfo.name)
}

// .ZimaProto.Map.PMapCell x_min_y_max_cell = 2;
bool PDynamicMap2DInfo::has_x_min_y_max_cell() const {
  return this != internal_default_instance() && x_min_y_max_cell_ != NULL;
}
void PDynamicMap2DInfo::clear_x_min_y_max_cell() {
  if (GetArenaNoVirtual() == NULL && x_min_y_max_cell_ != NULL) delete x_min_y_max_cell_;
  x_min_y_max_cell_ = NULL;
}
const ::ZimaProto::Map::PMapCell& PDynamicMap2DInfo::x_min_y_max_cell() const {
  const ::ZimaProto::Map::PMapCell* p = x_min_y_max_cell_;
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapCell*>(
      &::ZimaProto::Map::_PMapCell_default_instance_);
}
::ZimaProto::Map::PMapCell* PDynamicMap2DInfo::mutable_x_min_y_max_cell() {
  
  if (x_min_y_max_cell_ == NULL) {
    x_min_y_max_cell_ = new ::ZimaProto::Map::PMapCell;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
  return x_min_y_max_cell_;
}
::ZimaProto::Map::PMapCell* PDynamicMap2DInfo::release_x_min_y_max_cell() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
  
  ::ZimaProto::Map::PMapCell* temp = x_min_y_max_cell_;
  x_min_y_max_cell_ = NULL;
  return temp;
}
void PDynamicMap2DInfo::set_allocated_x_min_y_max_cell(::ZimaProto::Map::PMapCell* x_min_y_max_cell) {
  delete x_min_y_max_cell_;
  x_min_y_max_cell_ = x_min_y_max_cell;
  if (x_min_y_max_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PDynamicMap2DInfo.x_min_y_max_cell)
}

// float resolution = 3;
void PDynamicMap2DInfo::clear_resolution() {
  resolution_ = 0;
}
float PDynamicMap2DInfo::resolution() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.resolution)
  return resolution_;
}
void PDynamicMap2DInfo::set_resolution(float value) {
  
  resolution_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.resolution)
}

// int32 x_range = 4;
void PDynamicMap2DInfo::clear_x_range() {
  x_range_ = 0;
}
::google::protobuf::int32 PDynamicMap2DInfo::x_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.x_range)
  return x_range_;
}
void PDynamicMap2DInfo::set_x_range(::google::protobuf::int32 value) {
  
  x_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.x_range)
}

// int32 y_range = 5;
void PDynamicMap2DInfo::clear_y_range() {
  y_range_ = 0;
}
::google::protobuf::int32 PDynamicMap2DInfo::y_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.y_range)
  return y_range_;
}
void PDynamicMap2DInfo::set_y_range(::google::protobuf::int32 value) {
  
  y_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.y_range)
}

// int32 x_reserve_range = 6;
void PDynamicMap2DInfo::clear_x_reserve_range() {
  x_reserve_range_ = 0;
}
::google::protobuf::int32 PDynamicMap2DInfo::x_reserve_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.x_reserve_range)
  return x_reserve_range_;
}
void PDynamicMap2DInfo::set_x_reserve_range(::google::protobuf::int32 value) {
  
  x_reserve_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.x_reserve_range)
}

// int32 y_reserve_range = 7;
void PDynamicMap2DInfo::clear_y_reserve_range() {
  y_reserve_range_ = 0;
}
::google::protobuf::int32 PDynamicMap2DInfo::y_reserve_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PDynamicMap2DInfo.y_reserve_range)
  return y_reserve_range_;
}
void PDynamicMap2DInfo::set_y_reserve_range(::google::protobuf::int32 value) {
  
  y_reserve_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PDynamicMap2DInfo.y_reserve_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PCharGridMap2D::kMapInfoFieldNumber;
const int PCharGridMap2D::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PCharGridMap2D::PCharGridMap2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PCharGridMap2D)
}
PCharGridMap2D::PCharGridMap2D(const PCharGridMap2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.data().size() > 0) {
    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_map_info()) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo(*from.map_info_);
  } else {
    map_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PCharGridMap2D)
}

void PCharGridMap2D::SharedCtor() {
  data_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  map_info_ = NULL;
  _cached_size_ = 0;
}

PCharGridMap2D::~PCharGridMap2D() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PCharGridMap2D)
  SharedDtor();
}

void PCharGridMap2D::SharedDtor() {
  data_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete map_info_;
}

void PCharGridMap2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PCharGridMap2D::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PCharGridMap2D& PCharGridMap2D::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PCharGridMap2D* PCharGridMap2D::New(::google::protobuf::Arena* arena) const {
  PCharGridMap2D* n = new PCharGridMap2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PCharGridMap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PCharGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
  _internal_metadata_.Clear();
}

bool PCharGridMap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PCharGridMap2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_data()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->data().data(), static_cast<int>(this->data().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.Map.PCharGridMap2D.data"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PCharGridMap2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PCharGridMap2D)
  return false;
#undef DO_
}

void PCharGridMap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PCharGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_info_, output);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.Map.PCharGridMap2D.data");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      2, this->data(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PCharGridMap2D)
}

::google::protobuf::uint8* PCharGridMap2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PCharGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_info_, deterministic, target);
  }

  // string data = 2;
  if (this->data().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->data().data(), static_cast<int>(this->data().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.Map.PCharGridMap2D.data");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->data(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PCharGridMap2D)
  return target;
}

size_t PCharGridMap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PCharGridMap2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string data = 2;
  if (this->data().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->data());
  }

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PCharGridMap2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PCharGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PCharGridMap2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PCharGridMap2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PCharGridMap2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PCharGridMap2D)
    MergeFrom(*source);
  }
}

void PCharGridMap2D::MergeFrom(const PCharGridMap2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PCharGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.data().size() > 0) {

    data_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.data_);
  }
  if (from.has_map_info()) {
    mutable_map_info()->::ZimaProto::Map::PDynamicMap2DInfo::MergeFrom(from.map_info());
  }
}

void PCharGridMap2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PCharGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PCharGridMap2D::CopyFrom(const PCharGridMap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PCharGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PCharGridMap2D::IsInitialized() const {
  return true;
}

void PCharGridMap2D::Swap(PCharGridMap2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PCharGridMap2D::InternalSwap(PCharGridMap2D* other) {
  using std::swap;
  data_.Swap(&other->data_);
  swap(map_info_, other->map_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PCharGridMap2D::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PCharGridMap2D

// .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
bool PCharGridMap2D::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
void PCharGridMap2D::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) delete map_info_;
  map_info_ = NULL;
}
const ::ZimaProto::Map::PDynamicMap2DInfo& PCharGridMap2D::map_info() const {
  const ::ZimaProto::Map::PDynamicMap2DInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PCharGridMap2D.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PDynamicMap2DInfo*>(
      &::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_);
}
::ZimaProto::Map::PDynamicMap2DInfo* PCharGridMap2D::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PCharGridMap2D.map_info)
  return map_info_;
}
::ZimaProto::Map::PDynamicMap2DInfo* PCharGridMap2D::release_map_info() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PCharGridMap2D.map_info)
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
void PCharGridMap2D::set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  delete map_info_;
  map_info_ = map_info;
  if (map_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PCharGridMap2D.map_info)
}

// string data = 2;
void PCharGridMap2D::clear_data() {
  data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PCharGridMap2D::data() const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PCharGridMap2D.data)
  return data_.GetNoArena();
}
void PCharGridMap2D::set_data(const ::std::string& value) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PCharGridMap2D.data)
}
#if LANG_CXX11
void PCharGridMap2D::set_data(::std::string&& value) {
  
  data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.Map.PCharGridMap2D.data)
}
#endif
void PCharGridMap2D::set_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.Map.PCharGridMap2D.data)
}
void PCharGridMap2D::set_data(const char* value, size_t size) {
  
  data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.Map.PCharGridMap2D.data)
}
::std::string* PCharGridMap2D::mutable_data() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PCharGridMap2D.data)
  return data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PCharGridMap2D::release_data() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PCharGridMap2D.data)
  
  return data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PCharGridMap2D::set_allocated_data(::std::string* data) {
  if (data != NULL) {
    
  } else {
    
  }
  data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), data);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PCharGridMap2D.data)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PSlamValueGridMap2D::kMapInfoFieldNumber;
const int PSlamValueGridMap2D::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PSlamValueGridMap2D::PSlamValueGridMap2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PSlamValueGridMap2D)
}
PSlamValueGridMap2D::PSlamValueGridMap2D(const PSlamValueGridMap2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_info()) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo(*from.map_info_);
  } else {
    map_info_ = NULL;
  }
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PSlamValueGridMap2D)
}

void PSlamValueGridMap2D::SharedCtor() {
  map_info_ = NULL;
  _cached_size_ = 0;
}

PSlamValueGridMap2D::~PSlamValueGridMap2D() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PSlamValueGridMap2D)
  SharedDtor();
}

void PSlamValueGridMap2D::SharedDtor() {
  if (this != internal_default_instance()) delete map_info_;
}

void PSlamValueGridMap2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PSlamValueGridMap2D::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PSlamValueGridMap2D& PSlamValueGridMap2D::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PSlamValueGridMap2D* PSlamValueGridMap2D::New(::google::protobuf::Arena* arena) const {
  PSlamValueGridMap2D* n = new PSlamValueGridMap2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PSlamValueGridMap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PSlamValueGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
  _internal_metadata_.Clear();
}

bool PSlamValueGridMap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PSlamValueGridMap2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated int32 data = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 18u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PSlamValueGridMap2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PSlamValueGridMap2D)
  return false;
#undef DO_
}

void PSlamValueGridMap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PSlamValueGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_info_, output);
  }

  // repeated int32 data = 2;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(2, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
  }
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32NoTag(
      this->data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PSlamValueGridMap2D)
}

::google::protobuf::uint8* PSlamValueGridMap2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PSlamValueGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_info_, deterministic, target);
  }

  // repeated int32 data = 2;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      2,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32NoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PSlamValueGridMap2D)
  return target;
}

size_t PSlamValueGridMap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PSlamValueGridMap2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated int32 data = 2;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      Int32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_info_);
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PSlamValueGridMap2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PSlamValueGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PSlamValueGridMap2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PSlamValueGridMap2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PSlamValueGridMap2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PSlamValueGridMap2D)
    MergeFrom(*source);
  }
}

void PSlamValueGridMap2D::MergeFrom(const PSlamValueGridMap2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PSlamValueGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_map_info()) {
    mutable_map_info()->::ZimaProto::Map::PDynamicMap2DInfo::MergeFrom(from.map_info());
  }
}

void PSlamValueGridMap2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PSlamValueGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PSlamValueGridMap2D::CopyFrom(const PSlamValueGridMap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PSlamValueGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PSlamValueGridMap2D::IsInitialized() const {
  return true;
}

void PSlamValueGridMap2D::Swap(PSlamValueGridMap2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PSlamValueGridMap2D::InternalSwap(PSlamValueGridMap2D* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(map_info_, other->map_info_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PSlamValueGridMap2D::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PSlamValueGridMap2D

// .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
bool PSlamValueGridMap2D::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
void PSlamValueGridMap2D::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) delete map_info_;
  map_info_ = NULL;
}
const ::ZimaProto::Map::PDynamicMap2DInfo& PSlamValueGridMap2D::map_info() const {
  const ::ZimaProto::Map::PDynamicMap2DInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PSlamValueGridMap2D.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PDynamicMap2DInfo*>(
      &::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_);
}
::ZimaProto::Map::PDynamicMap2DInfo* PSlamValueGridMap2D::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.Map.PSlamValueGridMap2D.map_info)
  return map_info_;
}
::ZimaProto::Map::PDynamicMap2DInfo* PSlamValueGridMap2D::release_map_info() {
  // @@protoc_insertion_point(field_release:ZimaProto.Map.PSlamValueGridMap2D.map_info)
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
void PSlamValueGridMap2D::set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  delete map_info_;
  map_info_ = map_info;
  if (map_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.Map.PSlamValueGridMap2D.map_info)
}

// repeated int32 data = 2;
int PSlamValueGridMap2D::data_size() const {
  return data_.size();
}
void PSlamValueGridMap2D::clear_data() {
  data_.Clear();
}
::google::protobuf::int32 PSlamValueGridMap2D::data(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.Map.PSlamValueGridMap2D.data)
  return data_.Get(index);
}
void PSlamValueGridMap2D::set_data(int index, ::google::protobuf::int32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZimaProto.Map.PSlamValueGridMap2D.data)
}
void PSlamValueGridMap2D::add_data(::google::protobuf::int32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:ZimaProto.Map.PSlamValueGridMap2D.data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
PSlamValueGridMap2D::data() const {
  // @@protoc_insertion_point(field_list:ZimaProto.Map.PSlamValueGridMap2D.data)
  return data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
PSlamValueGridMap2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.Map.PSlamValueGridMap2D.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D_MapDictEntry::PMultiLayerCharGridMap2D_MapDictEntry() {}
PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D_MapDictEntry::PMultiLayerCharGridMap2D_MapDictEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D_MapDictEntry::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[7];
}
void PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D_MapDictEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D_MapDictEntry::MergeFrom(const PMultiLayerCharGridMap2D_MapDictEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PMultiLayerCharGridMap2D::kMapDictFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.Map.PMultiLayerCharGridMap2D)
}
PMultiLayerCharGridMap2D::PMultiLayerCharGridMap2D(const PMultiLayerCharGridMap2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_dict_.MergeFrom(from.map_dict_);
  // @@protoc_insertion_point(copy_constructor:ZimaProto.Map.PMultiLayerCharGridMap2D)
}

void PMultiLayerCharGridMap2D::SharedCtor() {
  _cached_size_ = 0;
}

PMultiLayerCharGridMap2D::~PMultiLayerCharGridMap2D() {
  // @@protoc_insertion_point(destructor:ZimaProto.Map.PMultiLayerCharGridMap2D)
  SharedDtor();
}

void PMultiLayerCharGridMap2D::SharedDtor() {
}

void PMultiLayerCharGridMap2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PMultiLayerCharGridMap2D::descriptor() {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PMultiLayerCharGridMap2D& PMultiLayerCharGridMap2D::default_instance() {
  protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PMultiLayerCharGridMap2D* PMultiLayerCharGridMap2D::New(::google::protobuf::Arena* arena) const {
  PMultiLayerCharGridMap2D* n = new PMultiLayerCharGridMap2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PMultiLayerCharGridMap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  map_dict_.Clear();
  _internal_metadata_.Clear();
}

bool PMultiLayerCharGridMap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          PMultiLayerCharGridMap2D_MapDictEntry::Parser< ::google::protobuf::internal::MapField<
              PMultiLayerCharGridMap2D_MapDictEntry,
              ::std::string, ::ZimaProto::Map::PCharGridMap2D,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D > > parser(&map_dict_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.Map.PMultiLayerCharGridMap2D.MapDictEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.Map.PMultiLayerCharGridMap2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.Map.PMultiLayerCharGridMap2D)
  return false;
#undef DO_
}

void PMultiLayerCharGridMap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
  if (!this->map_dict().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ZimaProto.Map.PMultiLayerCharGridMap2D.MapDictEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->map_dict().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_dict().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::const_iterator
          it = this->map_dict().begin();
          it != this->map_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PMultiLayerCharGridMap2D_MapDictEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_dict_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PMultiLayerCharGridMap2D_MapDictEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::const_iterator
          it = this->map_dict().begin();
          it != this->map_dict().end(); ++it) {
        entry.reset(map_dict_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            1, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.Map.PMultiLayerCharGridMap2D)
}

::google::protobuf::uint8* PMultiLayerCharGridMap2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
  if (!this->map_dict().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ZimaProto.Map.PMultiLayerCharGridMap2D.MapDictEntry.key");
      }
    };

    if (deterministic &&
        this->map_dict().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->map_dict().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::const_iterator
          it = this->map_dict().begin();
          it != this->map_dict().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PMultiLayerCharGridMap2D_MapDictEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(map_dict_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PMultiLayerCharGridMap2D_MapDictEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::const_iterator
          it = this->map_dict().begin();
          it != this->map_dict().end(); ++it) {
        entry.reset(map_dict_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       1, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.Map.PMultiLayerCharGridMap2D)
  return target;
}

size_t PMultiLayerCharGridMap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->map_dict_size());
  {
    ::google::protobuf::scoped_ptr<PMultiLayerCharGridMap2D_MapDictEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >::const_iterator
        it = this->map_dict().begin();
        it != this->map_dict().end(); ++it) {
      entry.reset(map_dict_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PMultiLayerCharGridMap2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PMultiLayerCharGridMap2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PMultiLayerCharGridMap2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.Map.PMultiLayerCharGridMap2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.Map.PMultiLayerCharGridMap2D)
    MergeFrom(*source);
  }
}

void PMultiLayerCharGridMap2D::MergeFrom(const PMultiLayerCharGridMap2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  map_dict_.MergeFrom(from.map_dict_);
}

void PMultiLayerCharGridMap2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PMultiLayerCharGridMap2D::CopyFrom(const PMultiLayerCharGridMap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.Map.PMultiLayerCharGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PMultiLayerCharGridMap2D::IsInitialized() const {
  return true;
}

void PMultiLayerCharGridMap2D::Swap(PMultiLayerCharGridMap2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PMultiLayerCharGridMap2D::InternalSwap(PMultiLayerCharGridMap2D* other) {
  using std::swap;
  map_dict_.Swap(&other->map_dict_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PMultiLayerCharGridMap2D::GetMetadata() const {
  protobuf_zima_2fproto_2fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PMultiLayerCharGridMap2D

// map<string, .ZimaProto.Map.PCharGridMap2D> map_dict = 1;
int PMultiLayerCharGridMap2D::map_dict_size() const {
  return map_dict_.size();
}
void PMultiLayerCharGridMap2D::clear_map_dict() {
  map_dict_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >&
PMultiLayerCharGridMap2D::map_dict() const {
  // @@protoc_insertion_point(field_map:ZimaProto.Map.PMultiLayerCharGridMap2D.map_dict)
  return map_dict_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ZimaProto::Map::PCharGridMap2D >*
PMultiLayerCharGridMap2D::mutable_map_dict() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.Map.PMultiLayerCharGridMap2D.map_dict)
  return map_dict_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace Map
}  // namespace ZimaProto

// @@protoc_insertion_point(global_scope)
