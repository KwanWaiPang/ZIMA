// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/operation_data.proto

#ifndef PROTOBUF_zima_2fproto_2foperation_5fdata_2eproto__INCLUDED
#define PROTOBUF_zima_2fproto_2foperation_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "zima/proto/map.pb.h"
#include "zima/proto/nav_data.pb.h"
// @@protoc_insertion_point(includes)
namespace ZimaProto {
namespace OperationData {
class PCleaningRecordSummary;
class PCleaningRecordSummaryDefaultTypeInternal;
extern PCleaningRecordSummaryDefaultTypeInternal _PCleaningRecordSummary_default_instance_;
class PCleaningRecordSummaryList;
class PCleaningRecordSummaryListDefaultTypeInternal;
extern PCleaningRecordSummaryListDefaultTypeInternal _PCleaningRecordSummaryList_default_instance_;
class POperationData;
class POperationDataDefaultTypeInternal;
extern POperationDataDefaultTypeInternal _POperationData_default_instance_;
class PStepPoint;
class PStepPointDefaultTypeInternal;
extern PStepPointDefaultTypeInternal _PStepPoint_default_instance_;
}  // namespace OperationData
}  // namespace ZimaProto

namespace ZimaProto {
namespace OperationData {

namespace protobuf_zima_2fproto_2foperation_5fdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_zima_2fproto_2foperation_5fdata_2eproto

enum POperationType {
  kNullType = 0,
  kAllHouseCleaning = 1,
  kSelectRoomCleaning = 2,
  kSelectAreaCleaning = 3,
  kAllHouseScanning = 4,
  POperationType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  POperationType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool POperationType_IsValid(int value);
const POperationType POperationType_MIN = kNullType;
const POperationType POperationType_MAX = kAllHouseScanning;
const int POperationType_ARRAYSIZE = POperationType_MAX + 1;

const ::google::protobuf::EnumDescriptor* POperationType_descriptor();
inline const ::std::string& POperationType_Name(POperationType value) {
  return ::google::protobuf::internal::NameOfEnum(
    POperationType_descriptor(), value);
}
inline bool POperationType_Parse(
    const ::std::string& name, POperationType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<POperationType>(
    POperationType_descriptor(), name, value);
}
enum POperationResult {
  kNullResult = 0,
  kStopped = 1,
  kFinishAutoCleaning = 2,
  kFinishAutoScanHouse = 3,
  POperationResult_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  POperationResult_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool POperationResult_IsValid(int value);
const POperationResult POperationResult_MIN = kNullResult;
const POperationResult POperationResult_MAX = kFinishAutoScanHouse;
const int POperationResult_ARRAYSIZE = POperationResult_MAX + 1;

const ::google::protobuf::EnumDescriptor* POperationResult_descriptor();
inline const ::std::string& POperationResult_Name(POperationResult value) {
  return ::google::protobuf::internal::NameOfEnum(
    POperationResult_descriptor(), value);
}
inline bool POperationResult_Parse(
    const ::std::string& name, POperationResult* value) {
  return ::google::protobuf::internal::ParseNamedEnum<POperationResult>(
    POperationResult_descriptor(), name, value);
}
enum PStepPointType {
  kNormalStep = 0,
  kPauseStep = 1,
  PStepPointType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PStepPointType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PStepPointType_IsValid(int value);
const PStepPointType PStepPointType_MIN = kNormalStep;
const PStepPointType PStepPointType_MAX = kPauseStep;
const int PStepPointType_ARRAYSIZE = PStepPointType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PStepPointType_descriptor();
inline const ::std::string& PStepPointType_Name(PStepPointType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PStepPointType_descriptor(), value);
}
inline bool PStepPointType_Parse(
    const ::std::string& name, PStepPointType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PStepPointType>(
    PStepPointType_descriptor(), name, value);
}
// ===================================================================

class PStepPoint : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.PStepPoint) */ {
 public:
  PStepPoint();
  virtual ~PStepPoint();

  PStepPoint(const PStepPoint& from);

  inline PStepPoint& operator=(const PStepPoint& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PStepPoint(PStepPoint&& from) noexcept
    : PStepPoint() {
    *this = ::std::move(from);
  }

  inline PStepPoint& operator=(PStepPoint&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PStepPoint& default_instance();

  static inline const PStepPoint* internal_default_instance() {
    return reinterpret_cast<const PStepPoint*>(
               &_PStepPoint_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PStepPoint* other);
  friend void swap(PStepPoint& a, PStepPoint& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PStepPoint* New() const PROTOBUF_FINAL { return New(NULL); }

  PStepPoint* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PStepPoint& from);
  void MergeFrom(const PStepPoint& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PStepPoint* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // .ZimaProto.Map.PMapPoint point = 1;
  bool has_point() const;
  void clear_point();
  static const int kPointFieldNumber = 1;
  const ::ZimaProto::Map::PMapPoint& point() const;
  ::ZimaProto::Map::PMapPoint* mutable_point();
  ::ZimaProto::Map::PMapPoint* release_point();
  void set_allocated_point(::ZimaProto::Map::PMapPoint* point);

  // .ZimaProto.OperationData.PStepPointType type = 2;
  void clear_type();
  static const int kTypeFieldNumber = 2;
  ::ZimaProto::OperationData::PStepPointType type() const;
  void set_type(::ZimaProto::OperationData::PStepPointType value);

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.PStepPoint)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::ZimaProto::Map::PMapPoint* point_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2foperation_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class POperationData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.POperationData) */ {
 public:
  POperationData();
  virtual ~POperationData();

  POperationData(const POperationData& from);

  inline POperationData& operator=(const POperationData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  POperationData(POperationData&& from) noexcept
    : POperationData() {
    *this = ::std::move(from);
  }

  inline POperationData& operator=(POperationData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const POperationData& default_instance();

  static inline const POperationData* internal_default_instance() {
    return reinterpret_cast<const POperationData*>(
               &_POperationData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(POperationData* other);
  friend void swap(POperationData& a, POperationData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline POperationData* New() const PROTOBUF_FINAL { return New(NULL); }

  POperationData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const POperationData& from);
  void MergeFrom(const POperationData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(POperationData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZimaProto.OperationData.PStepPoint step_points = 3;
  int step_points_size() const;
  void clear_step_points();
  static const int kStepPointsFieldNumber = 3;
  const ::ZimaProto::OperationData::PStepPoint& step_points(int index) const;
  ::ZimaProto::OperationData::PStepPoint* mutable_step_points(int index);
  ::ZimaProto::OperationData::PStepPoint* add_step_points();
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >*
      mutable_step_points();
  const ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >&
      step_points() const;

  // .ZimaProto.NavData.PNavData nav_data = 1;
  bool has_nav_data() const;
  void clear_nav_data();
  static const int kNavDataFieldNumber = 1;
  const ::ZimaProto::NavData::PNavData& nav_data() const;
  ::ZimaProto::NavData::PNavData* mutable_nav_data();
  ::ZimaProto::NavData::PNavData* release_nav_data();
  void set_allocated_nav_data(::ZimaProto::NavData::PNavData* nav_data);

  // .ZimaProto.Map.PMapPoint start_point = 4;
  bool has_start_point() const;
  void clear_start_point();
  static const int kStartPointFieldNumber = 4;
  const ::ZimaProto::Map::PMapPoint& start_point() const;
  ::ZimaProto::Map::PMapPoint* mutable_start_point();
  ::ZimaProto::Map::PMapPoint* release_start_point();
  void set_allocated_start_point(::ZimaProto::Map::PMapPoint* start_point);

  // double start_time = 2;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 2;
  double start_time() const;
  void set_start_time(double value);

  // double duration = 5;
  void clear_duration();
  static const int kDurationFieldNumber = 5;
  double duration() const;
  void set_duration(double value);

  // .ZimaProto.OperationData.POperationType operation_type = 6;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 6;
  ::ZimaProto::OperationData::POperationType operation_type() const;
  void set_operation_type(::ZimaProto::OperationData::POperationType value);

  // .ZimaProto.OperationData.POperationResult operation_result = 7;
  void clear_operation_result();
  static const int kOperationResultFieldNumber = 7;
  ::ZimaProto::OperationData::POperationResult operation_result() const;
  void set_operation_result(::ZimaProto::OperationData::POperationResult value);

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.POperationData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint > step_points_;
  ::ZimaProto::NavData::PNavData* nav_data_;
  ::ZimaProto::Map::PMapPoint* start_point_;
  double start_time_;
  double duration_;
  int operation_type_;
  int operation_result_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2foperation_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PCleaningRecordSummary : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.PCleaningRecordSummary) */ {
 public:
  PCleaningRecordSummary();
  virtual ~PCleaningRecordSummary();

  PCleaningRecordSummary(const PCleaningRecordSummary& from);

  inline PCleaningRecordSummary& operator=(const PCleaningRecordSummary& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PCleaningRecordSummary(PCleaningRecordSummary&& from) noexcept
    : PCleaningRecordSummary() {
    *this = ::std::move(from);
  }

  inline PCleaningRecordSummary& operator=(PCleaningRecordSummary&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PCleaningRecordSummary& default_instance();

  static inline const PCleaningRecordSummary* internal_default_instance() {
    return reinterpret_cast<const PCleaningRecordSummary*>(
               &_PCleaningRecordSummary_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PCleaningRecordSummary* other);
  friend void swap(PCleaningRecordSummary& a, PCleaningRecordSummary& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PCleaningRecordSummary* New() const PROTOBUF_FINAL { return New(NULL); }

  PCleaningRecordSummary* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PCleaningRecordSummary& from);
  void MergeFrom(const PCleaningRecordSummary& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PCleaningRecordSummary* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // uint32 start_time = 1;
  void clear_start_time();
  static const int kStartTimeFieldNumber = 1;
  ::google::protobuf::uint32 start_time() const;
  void set_start_time(::google::protobuf::uint32 value);

  // uint32 duration = 2;
  void clear_duration();
  static const int kDurationFieldNumber = 2;
  ::google::protobuf::uint32 duration() const;
  void set_duration(::google::protobuf::uint32 value);

  // double area_size = 3;
  void clear_area_size();
  static const int kAreaSizeFieldNumber = 3;
  double area_size() const;
  void set_area_size(double value);

  // .ZimaProto.OperationData.POperationType operation_type = 4;
  void clear_operation_type();
  static const int kOperationTypeFieldNumber = 4;
  ::ZimaProto::OperationData::POperationType operation_type() const;
  void set_operation_type(::ZimaProto::OperationData::POperationType value);

  // .ZimaProto.OperationData.POperationResult operation_result = 5;
  void clear_operation_result();
  static const int kOperationResultFieldNumber = 5;
  ::ZimaProto::OperationData::POperationResult operation_result() const;
  void set_operation_result(::ZimaProto::OperationData::POperationResult value);

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.PCleaningRecordSummary)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::uint32 start_time_;
  ::google::protobuf::uint32 duration_;
  double area_size_;
  int operation_type_;
  int operation_result_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2foperation_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PCleaningRecordSummaryList : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.OperationData.PCleaningRecordSummaryList) */ {
 public:
  PCleaningRecordSummaryList();
  virtual ~PCleaningRecordSummaryList();

  PCleaningRecordSummaryList(const PCleaningRecordSummaryList& from);

  inline PCleaningRecordSummaryList& operator=(const PCleaningRecordSummaryList& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PCleaningRecordSummaryList(PCleaningRecordSummaryList&& from) noexcept
    : PCleaningRecordSummaryList() {
    *this = ::std::move(from);
  }

  inline PCleaningRecordSummaryList& operator=(PCleaningRecordSummaryList&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PCleaningRecordSummaryList& default_instance();

  static inline const PCleaningRecordSummaryList* internal_default_instance() {
    return reinterpret_cast<const PCleaningRecordSummaryList*>(
               &_PCleaningRecordSummaryList_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    3;

  void Swap(PCleaningRecordSummaryList* other);
  friend void swap(PCleaningRecordSummaryList& a, PCleaningRecordSummaryList& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PCleaningRecordSummaryList* New() const PROTOBUF_FINAL { return New(NULL); }

  PCleaningRecordSummaryList* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PCleaningRecordSummaryList& from);
  void MergeFrom(const PCleaningRecordSummaryList& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PCleaningRecordSummaryList* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZimaProto.OperationData.PCleaningRecordSummary record_summary_list = 1;
  int record_summary_list_size() const;
  void clear_record_summary_list();
  static const int kRecordSummaryListFieldNumber = 1;
  const ::ZimaProto::OperationData::PCleaningRecordSummary& record_summary_list(int index) const;
  ::ZimaProto::OperationData::PCleaningRecordSummary* mutable_record_summary_list(int index);
  ::ZimaProto::OperationData::PCleaningRecordSummary* add_record_summary_list();
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >*
      mutable_record_summary_list();
  const ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >&
      record_summary_list() const;

  // @@protoc_insertion_point(class_scope:ZimaProto.OperationData.PCleaningRecordSummaryList)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary > record_summary_list_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2foperation_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PStepPoint

// .ZimaProto.Map.PMapPoint point = 1;
inline bool PStepPoint::has_point() const {
  return this != internal_default_instance() && point_ != NULL;
}
inline void PStepPoint::clear_point() {
  if (GetArenaNoVirtual() == NULL && point_ != NULL) delete point_;
  point_ = NULL;
}
inline const ::ZimaProto::Map::PMapPoint& PStepPoint::point() const {
  const ::ZimaProto::Map::PMapPoint* p = point_;
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PStepPoint.point)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapPoint*>(
      &::ZimaProto::Map::_PMapPoint_default_instance_);
}
inline ::ZimaProto::Map::PMapPoint* PStepPoint::mutable_point() {
  
  if (point_ == NULL) {
    point_ = new ::ZimaProto::Map::PMapPoint;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.PStepPoint.point)
  return point_;
}
inline ::ZimaProto::Map::PMapPoint* PStepPoint::release_point() {
  // @@protoc_insertion_point(field_release:ZimaProto.OperationData.PStepPoint.point)
  
  ::ZimaProto::Map::PMapPoint* temp = point_;
  point_ = NULL;
  return temp;
}
inline void PStepPoint::set_allocated_point(::ZimaProto::Map::PMapPoint* point) {
  delete point_;
  point_ = point;
  if (point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.OperationData.PStepPoint.point)
}

// .ZimaProto.OperationData.PStepPointType type = 2;
inline void PStepPoint::clear_type() {
  type_ = 0;
}
inline ::ZimaProto::OperationData::PStepPointType PStepPoint::type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PStepPoint.type)
  return static_cast< ::ZimaProto::OperationData::PStepPointType >(type_);
}
inline void PStepPoint::set_type(::ZimaProto::OperationData::PStepPointType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PStepPoint.type)
}

// -------------------------------------------------------------------

// POperationData

// .ZimaProto.NavData.PNavData nav_data = 1;
inline bool POperationData::has_nav_data() const {
  return this != internal_default_instance() && nav_data_ != NULL;
}
inline void POperationData::clear_nav_data() {
  if (GetArenaNoVirtual() == NULL && nav_data_ != NULL) delete nav_data_;
  nav_data_ = NULL;
}
inline const ::ZimaProto::NavData::PNavData& POperationData::nav_data() const {
  const ::ZimaProto::NavData::PNavData* p = nav_data_;
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.nav_data)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::NavData::PNavData*>(
      &::ZimaProto::NavData::_PNavData_default_instance_);
}
inline ::ZimaProto::NavData::PNavData* POperationData::mutable_nav_data() {
  
  if (nav_data_ == NULL) {
    nav_data_ = new ::ZimaProto::NavData::PNavData;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.POperationData.nav_data)
  return nav_data_;
}
inline ::ZimaProto::NavData::PNavData* POperationData::release_nav_data() {
  // @@protoc_insertion_point(field_release:ZimaProto.OperationData.POperationData.nav_data)
  
  ::ZimaProto::NavData::PNavData* temp = nav_data_;
  nav_data_ = NULL;
  return temp;
}
inline void POperationData::set_allocated_nav_data(::ZimaProto::NavData::PNavData* nav_data) {
  delete nav_data_;
  nav_data_ = nav_data;
  if (nav_data) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.OperationData.POperationData.nav_data)
}

// double start_time = 2;
inline void POperationData::clear_start_time() {
  start_time_ = 0;
}
inline double POperationData::start_time() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.start_time)
  return start_time_;
}
inline void POperationData::set_start_time(double value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.start_time)
}

// repeated .ZimaProto.OperationData.PStepPoint step_points = 3;
inline int POperationData::step_points_size() const {
  return step_points_.size();
}
inline void POperationData::clear_step_points() {
  step_points_.Clear();
}
inline const ::ZimaProto::OperationData::PStepPoint& POperationData::step_points(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.step_points)
  return step_points_.Get(index);
}
inline ::ZimaProto::OperationData::PStepPoint* POperationData::mutable_step_points(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.POperationData.step_points)
  return step_points_.Mutable(index);
}
inline ::ZimaProto::OperationData::PStepPoint* POperationData::add_step_points() {
  // @@protoc_insertion_point(field_add:ZimaProto.OperationData.POperationData.step_points)
  return step_points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >*
POperationData::mutable_step_points() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.OperationData.POperationData.step_points)
  return &step_points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PStepPoint >&
POperationData::step_points() const {
  // @@protoc_insertion_point(field_list:ZimaProto.OperationData.POperationData.step_points)
  return step_points_;
}

// .ZimaProto.Map.PMapPoint start_point = 4;
inline bool POperationData::has_start_point() const {
  return this != internal_default_instance() && start_point_ != NULL;
}
inline void POperationData::clear_start_point() {
  if (GetArenaNoVirtual() == NULL && start_point_ != NULL) delete start_point_;
  start_point_ = NULL;
}
inline const ::ZimaProto::Map::PMapPoint& POperationData::start_point() const {
  const ::ZimaProto::Map::PMapPoint* p = start_point_;
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.start_point)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapPoint*>(
      &::ZimaProto::Map::_PMapPoint_default_instance_);
}
inline ::ZimaProto::Map::PMapPoint* POperationData::mutable_start_point() {
  
  if (start_point_ == NULL) {
    start_point_ = new ::ZimaProto::Map::PMapPoint;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.POperationData.start_point)
  return start_point_;
}
inline ::ZimaProto::Map::PMapPoint* POperationData::release_start_point() {
  // @@protoc_insertion_point(field_release:ZimaProto.OperationData.POperationData.start_point)
  
  ::ZimaProto::Map::PMapPoint* temp = start_point_;
  start_point_ = NULL;
  return temp;
}
inline void POperationData::set_allocated_start_point(::ZimaProto::Map::PMapPoint* start_point) {
  delete start_point_;
  start_point_ = start_point;
  if (start_point) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.OperationData.POperationData.start_point)
}

// double duration = 5;
inline void POperationData::clear_duration() {
  duration_ = 0;
}
inline double POperationData::duration() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.duration)
  return duration_;
}
inline void POperationData::set_duration(double value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.duration)
}

// .ZimaProto.OperationData.POperationType operation_type = 6;
inline void POperationData::clear_operation_type() {
  operation_type_ = 0;
}
inline ::ZimaProto::OperationData::POperationType POperationData::operation_type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.operation_type)
  return static_cast< ::ZimaProto::OperationData::POperationType >(operation_type_);
}
inline void POperationData::set_operation_type(::ZimaProto::OperationData::POperationType value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.operation_type)
}

// .ZimaProto.OperationData.POperationResult operation_result = 7;
inline void POperationData::clear_operation_result() {
  operation_result_ = 0;
}
inline ::ZimaProto::OperationData::POperationResult POperationData::operation_result() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.POperationData.operation_result)
  return static_cast< ::ZimaProto::OperationData::POperationResult >(operation_result_);
}
inline void POperationData::set_operation_result(::ZimaProto::OperationData::POperationResult value) {
  
  operation_result_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.POperationData.operation_result)
}

// -------------------------------------------------------------------

// PCleaningRecordSummary

// uint32 start_time = 1;
inline void PCleaningRecordSummary::clear_start_time() {
  start_time_ = 0u;
}
inline ::google::protobuf::uint32 PCleaningRecordSummary::start_time() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.start_time)
  return start_time_;
}
inline void PCleaningRecordSummary::set_start_time(::google::protobuf::uint32 value) {
  
  start_time_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.start_time)
}

// uint32 duration = 2;
inline void PCleaningRecordSummary::clear_duration() {
  duration_ = 0u;
}
inline ::google::protobuf::uint32 PCleaningRecordSummary::duration() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.duration)
  return duration_;
}
inline void PCleaningRecordSummary::set_duration(::google::protobuf::uint32 value) {
  
  duration_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.duration)
}

// double area_size = 3;
inline void PCleaningRecordSummary::clear_area_size() {
  area_size_ = 0;
}
inline double PCleaningRecordSummary::area_size() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.area_size)
  return area_size_;
}
inline void PCleaningRecordSummary::set_area_size(double value) {
  
  area_size_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.area_size)
}

// .ZimaProto.OperationData.POperationType operation_type = 4;
inline void PCleaningRecordSummary::clear_operation_type() {
  operation_type_ = 0;
}
inline ::ZimaProto::OperationData::POperationType PCleaningRecordSummary::operation_type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.operation_type)
  return static_cast< ::ZimaProto::OperationData::POperationType >(operation_type_);
}
inline void PCleaningRecordSummary::set_operation_type(::ZimaProto::OperationData::POperationType value) {
  
  operation_type_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.operation_type)
}

// .ZimaProto.OperationData.POperationResult operation_result = 5;
inline void PCleaningRecordSummary::clear_operation_result() {
  operation_result_ = 0;
}
inline ::ZimaProto::OperationData::POperationResult PCleaningRecordSummary::operation_result() const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummary.operation_result)
  return static_cast< ::ZimaProto::OperationData::POperationResult >(operation_result_);
}
inline void PCleaningRecordSummary::set_operation_result(::ZimaProto::OperationData::POperationResult value) {
  
  operation_result_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.OperationData.PCleaningRecordSummary.operation_result)
}

// -------------------------------------------------------------------

// PCleaningRecordSummaryList

// repeated .ZimaProto.OperationData.PCleaningRecordSummary record_summary_list = 1;
inline int PCleaningRecordSummaryList::record_summary_list_size() const {
  return record_summary_list_.size();
}
inline void PCleaningRecordSummaryList::clear_record_summary_list() {
  record_summary_list_.Clear();
}
inline const ::ZimaProto::OperationData::PCleaningRecordSummary& PCleaningRecordSummaryList::record_summary_list(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return record_summary_list_.Get(index);
}
inline ::ZimaProto::OperationData::PCleaningRecordSummary* PCleaningRecordSummaryList::mutable_record_summary_list(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return record_summary_list_.Mutable(index);
}
inline ::ZimaProto::OperationData::PCleaningRecordSummary* PCleaningRecordSummaryList::add_record_summary_list() {
  // @@protoc_insertion_point(field_add:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return record_summary_list_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >*
PCleaningRecordSummaryList::mutable_record_summary_list() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return &record_summary_list_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZimaProto::OperationData::PCleaningRecordSummary >&
PCleaningRecordSummaryList::record_summary_list() const {
  // @@protoc_insertion_point(field_list:ZimaProto.OperationData.PCleaningRecordSummaryList.record_summary_list)
  return record_summary_list_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace OperationData
}  // namespace ZimaProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ZimaProto::OperationData::POperationType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZimaProto::OperationData::POperationType>() {
  return ::ZimaProto::OperationData::POperationType_descriptor();
}
template <> struct is_proto_enum< ::ZimaProto::OperationData::POperationResult> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZimaProto::OperationData::POperationResult>() {
  return ::ZimaProto::OperationData::POperationResult_descriptor();
}
template <> struct is_proto_enum< ::ZimaProto::OperationData::PStepPointType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZimaProto::OperationData::PStepPointType>() {
  return ::ZimaProto::OperationData::PStepPointType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zima_2fproto_2foperation_5fdata_2eproto__INCLUDED
