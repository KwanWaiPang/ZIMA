// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/probability_map.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zima/proto/probability_map.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZimaProto {
namespace ProbabilityMap {
class PProbabilityIndexGridMap2DDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PProbabilityIndexGridMap2D>
     _instance;
} _PProbabilityIndexGridMap2D_default_instance_;

namespace protobuf_zima_2fproto_2fprobability_5fmap_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, map_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, hit_probability_on_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, miss_probability_on_obstacle_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, max_probability_for_obstacle_in_cell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, min_probability_for_obstacle_in_cell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, probability_count_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PProbabilityIndexGridMap2D, data_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(PProbabilityIndexGridMap2D)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PProbabilityIndexGridMap2D_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zima/proto/probability_map.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, NULL, NULL);
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 1);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ZimaProto::Map::protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  _PProbabilityIndexGridMap2D_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PProbabilityIndexGridMap2D_default_instance_);_PProbabilityIndexGridMap2D_default_instance_._instance.get_mutable()->map_info_ = const_cast< ::ZimaProto::Map::PDynamicMap2DInfo*>(
      ::ZimaProto::Map::PDynamicMap2DInfo::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n zima/proto/probability_map.proto\022\030Zima"
      "Proto.ProbabilityMap\032\024zima/proto/map.pro"
      "to\"\240\002\n\032PProbabilityIndexGridMap2D\0222\n\010map"
      "_info\030\001 \001(\0132 .ZimaProto.Map.PDynamicMap2"
      "DInfo\022#\n\033hit_probability_on_obstacle\030\002 \001"
      "(\002\022$\n\034miss_probability_on_obstacle\030\003 \001(\002"
      "\022,\n$max_probability_for_obstacle_in_cell"
      "\030\004 \001(\002\022,\n$min_probability_for_obstacle_i"
      "n_cell\030\005 \001(\002\022\031\n\021probability_count\030\006 \001(\r\022"
      "\014\n\004data\030\007 \003(\rb\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 381);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zima/proto/probability_map.proto", &protobuf_RegisterTypes);
  ::ZimaProto::Map::protobuf_zima_2fproto_2fmap_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zima_2fproto_2fprobability_5fmap_2eproto


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PProbabilityIndexGridMap2D::kMapInfoFieldNumber;
const int PProbabilityIndexGridMap2D::kHitProbabilityOnObstacleFieldNumber;
const int PProbabilityIndexGridMap2D::kMissProbabilityOnObstacleFieldNumber;
const int PProbabilityIndexGridMap2D::kMaxProbabilityForObstacleInCellFieldNumber;
const int PProbabilityIndexGridMap2D::kMinProbabilityForObstacleInCellFieldNumber;
const int PProbabilityIndexGridMap2D::kProbabilityCountFieldNumber;
const int PProbabilityIndexGridMap2D::kDataFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PProbabilityIndexGridMap2D::PProbabilityIndexGridMap2D()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fprobability_5fmap_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
}
PProbabilityIndexGridMap2D::PProbabilityIndexGridMap2D(const PProbabilityIndexGridMap2D& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      data_(from.data_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  if (from.has_map_info()) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo(*from.map_info_);
  } else {
    map_info_ = NULL;
  }
  ::memcpy(&hit_probability_on_obstacle_, &from.hit_probability_on_obstacle_,
    static_cast<size_t>(reinterpret_cast<char*>(&probability_count_) -
    reinterpret_cast<char*>(&hit_probability_on_obstacle_)) + sizeof(probability_count_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
}

void PProbabilityIndexGridMap2D::SharedCtor() {
  ::memset(&map_info_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_count_) -
      reinterpret_cast<char*>(&map_info_)) + sizeof(probability_count_));
  _cached_size_ = 0;
}

PProbabilityIndexGridMap2D::~PProbabilityIndexGridMap2D() {
  // @@protoc_insertion_point(destructor:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  SharedDtor();
}

void PProbabilityIndexGridMap2D::SharedDtor() {
  if (this != internal_default_instance()) delete map_info_;
}

void PProbabilityIndexGridMap2D::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PProbabilityIndexGridMap2D::descriptor() {
  protobuf_zima_2fproto_2fprobability_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fprobability_5fmap_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PProbabilityIndexGridMap2D& PProbabilityIndexGridMap2D::default_instance() {
  protobuf_zima_2fproto_2fprobability_5fmap_2eproto::InitDefaults();
  return *internal_default_instance();
}

PProbabilityIndexGridMap2D* PProbabilityIndexGridMap2D::New(::google::protobuf::Arena* arena) const {
  PProbabilityIndexGridMap2D* n = new PProbabilityIndexGridMap2D;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PProbabilityIndexGridMap2D::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  data_.Clear();
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) {
    delete map_info_;
  }
  map_info_ = NULL;
  ::memset(&hit_probability_on_obstacle_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&probability_count_) -
      reinterpret_cast<char*>(&hit_probability_on_obstacle_)) + sizeof(probability_count_));
  _internal_metadata_.Clear();
}

bool PProbabilityIndexGridMap2D::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_map_info()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float hit_probability_on_obstacle = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(21u /* 21 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &hit_probability_on_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float miss_probability_on_obstacle = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(29u /* 29 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &miss_probability_on_obstacle_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float max_probability_for_obstacle_in_cell = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(37u /* 37 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &max_probability_for_obstacle_in_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // float min_probability_for_obstacle_in_cell = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(45u /* 45 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &min_probability_for_obstacle_in_cell_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 probability_count = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(48u /* 48 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &probability_count_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated uint32 data = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_data())));
        } else if (
            static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(56u /* 56 & 0xFF */)) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 58u, input, this->mutable_data())));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  return false;
#undef DO_
}

void PProbabilityIndexGridMap2D::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, *this->map_info_, output);
  }

  // float hit_probability_on_obstacle = 2;
  if (this->hit_probability_on_obstacle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->hit_probability_on_obstacle(), output);
  }

  // float miss_probability_on_obstacle = 3;
  if (this->miss_probability_on_obstacle() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->miss_probability_on_obstacle(), output);
  }

  // float max_probability_for_obstacle_in_cell = 4;
  if (this->max_probability_for_obstacle_in_cell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(4, this->max_probability_for_obstacle_in_cell(), output);
  }

  // float min_probability_for_obstacle_in_cell = 5;
  if (this->min_probability_for_obstacle_in_cell() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->min_probability_for_obstacle_in_cell(), output);
  }

  // uint32 probability_count = 6;
  if (this->probability_count() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->probability_count(), output);
  }

  // repeated uint32 data = 7;
  if (this->data_size() > 0) {
    ::google::protobuf::internal::WireFormatLite::WriteTag(7, ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED, output);
    output->WriteVarint32(static_cast< ::google::protobuf::uint32>(
        _data_cached_byte_size_));
  }
  for (int i = 0, n = this->data_size(); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32NoTag(
      this->data(i), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
}

::google::protobuf::uint8* PProbabilityIndexGridMap2D::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        1, *this->map_info_, deterministic, target);
  }

  // float hit_probability_on_obstacle = 2;
  if (this->hit_probability_on_obstacle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->hit_probability_on_obstacle(), target);
  }

  // float miss_probability_on_obstacle = 3;
  if (this->miss_probability_on_obstacle() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->miss_probability_on_obstacle(), target);
  }

  // float max_probability_for_obstacle_in_cell = 4;
  if (this->max_probability_for_obstacle_in_cell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(4, this->max_probability_for_obstacle_in_cell(), target);
  }

  // float min_probability_for_obstacle_in_cell = 5;
  if (this->min_probability_for_obstacle_in_cell() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->min_probability_for_obstacle_in_cell(), target);
  }

  // uint32 probability_count = 6;
  if (this->probability_count() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->probability_count(), target);
  }

  // repeated uint32 data = 7;
  if (this->data_size() > 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteTagToArray(
      7,
      ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED,
      target);
    target = ::google::protobuf::io::CodedOutputStream::WriteVarint32ToArray(
        static_cast< ::google::protobuf::uint32>(
            _data_cached_byte_size_), target);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32NoTagToArray(this->data_, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  return target;
}

size_t PProbabilityIndexGridMap2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated uint32 data = 7;
  {
    size_t data_size = ::google::protobuf::internal::WireFormatLite::
      UInt32Size(this->data_);
    if (data_size > 0) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
            static_cast< ::google::protobuf::int32>(data_size));
    }
    int cached_size = ::google::protobuf::internal::ToCachedSize(data_size);
    GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
    _data_cached_byte_size_ = cached_size;
    GOOGLE_SAFE_CONCURRENT_WRITES_END();
    total_size += data_size;
  }

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  if (this->has_map_info()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->map_info_);
  }

  // float hit_probability_on_obstacle = 2;
  if (this->hit_probability_on_obstacle() != 0) {
    total_size += 1 + 4;
  }

  // float miss_probability_on_obstacle = 3;
  if (this->miss_probability_on_obstacle() != 0) {
    total_size += 1 + 4;
  }

  // float max_probability_for_obstacle_in_cell = 4;
  if (this->max_probability_for_obstacle_in_cell() != 0) {
    total_size += 1 + 4;
  }

  // float min_probability_for_obstacle_in_cell = 5;
  if (this->min_probability_for_obstacle_in_cell() != 0) {
    total_size += 1 + 4;
  }

  // uint32 probability_count = 6;
  if (this->probability_count() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->probability_count());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PProbabilityIndexGridMap2D::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  const PProbabilityIndexGridMap2D* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PProbabilityIndexGridMap2D>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
    MergeFrom(*source);
  }
}

void PProbabilityIndexGridMap2D::MergeFrom(const PProbabilityIndexGridMap2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  data_.MergeFrom(from.data_);
  if (from.has_map_info()) {
    mutable_map_info()->::ZimaProto::Map::PDynamicMap2DInfo::MergeFrom(from.map_info());
  }
  if (from.hit_probability_on_obstacle() != 0) {
    set_hit_probability_on_obstacle(from.hit_probability_on_obstacle());
  }
  if (from.miss_probability_on_obstacle() != 0) {
    set_miss_probability_on_obstacle(from.miss_probability_on_obstacle());
  }
  if (from.max_probability_for_obstacle_in_cell() != 0) {
    set_max_probability_for_obstacle_in_cell(from.max_probability_for_obstacle_in_cell());
  }
  if (from.min_probability_for_obstacle_in_cell() != 0) {
    set_min_probability_for_obstacle_in_cell(from.min_probability_for_obstacle_in_cell());
  }
  if (from.probability_count() != 0) {
    set_probability_count(from.probability_count());
  }
}

void PProbabilityIndexGridMap2D::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PProbabilityIndexGridMap2D::CopyFrom(const PProbabilityIndexGridMap2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PProbabilityIndexGridMap2D::IsInitialized() const {
  return true;
}

void PProbabilityIndexGridMap2D::Swap(PProbabilityIndexGridMap2D* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PProbabilityIndexGridMap2D::InternalSwap(PProbabilityIndexGridMap2D* other) {
  using std::swap;
  data_.InternalSwap(&other->data_);
  swap(map_info_, other->map_info_);
  swap(hit_probability_on_obstacle_, other->hit_probability_on_obstacle_);
  swap(miss_probability_on_obstacle_, other->miss_probability_on_obstacle_);
  swap(max_probability_for_obstacle_in_cell_, other->max_probability_for_obstacle_in_cell_);
  swap(min_probability_for_obstacle_in_cell_, other->min_probability_for_obstacle_in_cell_);
  swap(probability_count_, other->probability_count_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PProbabilityIndexGridMap2D::GetMetadata() const {
  protobuf_zima_2fproto_2fprobability_5fmap_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fprobability_5fmap_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PProbabilityIndexGridMap2D

// .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
bool PProbabilityIndexGridMap2D::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
void PProbabilityIndexGridMap2D::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) delete map_info_;
  map_info_ = NULL;
}
const ::ZimaProto::Map::PDynamicMap2DInfo& PProbabilityIndexGridMap2D::map_info() const {
  const ::ZimaProto::Map::PDynamicMap2DInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PDynamicMap2DInfo*>(
      &::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_);
}
::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  return map_info_;
}
::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::release_map_info() {
  // @@protoc_insertion_point(field_release:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
void PProbabilityIndexGridMap2D::set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  delete map_info_;
  map_info_ = map_info;
  if (map_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
}

// float hit_probability_on_obstacle = 2;
void PProbabilityIndexGridMap2D::clear_hit_probability_on_obstacle() {
  hit_probability_on_obstacle_ = 0;
}
float PProbabilityIndexGridMap2D::hit_probability_on_obstacle() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.hit_probability_on_obstacle)
  return hit_probability_on_obstacle_;
}
void PProbabilityIndexGridMap2D::set_hit_probability_on_obstacle(float value) {
  
  hit_probability_on_obstacle_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.hit_probability_on_obstacle)
}

// float miss_probability_on_obstacle = 3;
void PProbabilityIndexGridMap2D::clear_miss_probability_on_obstacle() {
  miss_probability_on_obstacle_ = 0;
}
float PProbabilityIndexGridMap2D::miss_probability_on_obstacle() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.miss_probability_on_obstacle)
  return miss_probability_on_obstacle_;
}
void PProbabilityIndexGridMap2D::set_miss_probability_on_obstacle(float value) {
  
  miss_probability_on_obstacle_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.miss_probability_on_obstacle)
}

// float max_probability_for_obstacle_in_cell = 4;
void PProbabilityIndexGridMap2D::clear_max_probability_for_obstacle_in_cell() {
  max_probability_for_obstacle_in_cell_ = 0;
}
float PProbabilityIndexGridMap2D::max_probability_for_obstacle_in_cell() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.max_probability_for_obstacle_in_cell)
  return max_probability_for_obstacle_in_cell_;
}
void PProbabilityIndexGridMap2D::set_max_probability_for_obstacle_in_cell(float value) {
  
  max_probability_for_obstacle_in_cell_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.max_probability_for_obstacle_in_cell)
}

// float min_probability_for_obstacle_in_cell = 5;
void PProbabilityIndexGridMap2D::clear_min_probability_for_obstacle_in_cell() {
  min_probability_for_obstacle_in_cell_ = 0;
}
float PProbabilityIndexGridMap2D::min_probability_for_obstacle_in_cell() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.min_probability_for_obstacle_in_cell)
  return min_probability_for_obstacle_in_cell_;
}
void PProbabilityIndexGridMap2D::set_min_probability_for_obstacle_in_cell(float value) {
  
  min_probability_for_obstacle_in_cell_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.min_probability_for_obstacle_in_cell)
}

// uint32 probability_count = 6;
void PProbabilityIndexGridMap2D::clear_probability_count() {
  probability_count_ = 0u;
}
::google::protobuf::uint32 PProbabilityIndexGridMap2D::probability_count() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.probability_count)
  return probability_count_;
}
void PProbabilityIndexGridMap2D::set_probability_count(::google::protobuf::uint32 value) {
  
  probability_count_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.probability_count)
}

// repeated uint32 data = 7;
int PProbabilityIndexGridMap2D::data_size() const {
  return data_.size();
}
void PProbabilityIndexGridMap2D::clear_data() {
  data_.Clear();
}
::google::protobuf::uint32 PProbabilityIndexGridMap2D::data(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return data_.Get(index);
}
void PProbabilityIndexGridMap2D::set_data(int index, ::google::protobuf::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
}
void PProbabilityIndexGridMap2D::add_data(::google::protobuf::uint32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
}
const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PProbabilityIndexGridMap2D::data() const {
  // @@protoc_insertion_point(field_list:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return data_;
}
::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PProbabilityIndexGridMap2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return &data_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace ProbabilityMap
}  // namespace ZimaProto

// @@protoc_insertion_point(global_scope)
