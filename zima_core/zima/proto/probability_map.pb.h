// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/probability_map.proto

#ifndef PROTOBUF_zima_2fproto_2fprobability_5fmap_2eproto__INCLUDED
#define PROTOBUF_zima_2fproto_2fprobability_5fmap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
#include "zima/proto/map.pb.h"
// @@protoc_insertion_point(includes)
namespace ZimaProto {
namespace ProbabilityMap {
class PProbabilityIndexGridMap2D;
class PProbabilityIndexGridMap2DDefaultTypeInternal;
extern PProbabilityIndexGridMap2DDefaultTypeInternal _PProbabilityIndexGridMap2D_default_instance_;
}  // namespace ProbabilityMap
}  // namespace ZimaProto

namespace ZimaProto {
namespace ProbabilityMap {

namespace protobuf_zima_2fproto_2fprobability_5fmap_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_zima_2fproto_2fprobability_5fmap_2eproto

// ===================================================================

class PProbabilityIndexGridMap2D : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D) */ {
 public:
  PProbabilityIndexGridMap2D();
  virtual ~PProbabilityIndexGridMap2D();

  PProbabilityIndexGridMap2D(const PProbabilityIndexGridMap2D& from);

  inline PProbabilityIndexGridMap2D& operator=(const PProbabilityIndexGridMap2D& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PProbabilityIndexGridMap2D(PProbabilityIndexGridMap2D&& from) noexcept
    : PProbabilityIndexGridMap2D() {
    *this = ::std::move(from);
  }

  inline PProbabilityIndexGridMap2D& operator=(PProbabilityIndexGridMap2D&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PProbabilityIndexGridMap2D& default_instance();

  static inline const PProbabilityIndexGridMap2D* internal_default_instance() {
    return reinterpret_cast<const PProbabilityIndexGridMap2D*>(
               &_PProbabilityIndexGridMap2D_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PProbabilityIndexGridMap2D* other);
  friend void swap(PProbabilityIndexGridMap2D& a, PProbabilityIndexGridMap2D& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PProbabilityIndexGridMap2D* New() const PROTOBUF_FINAL { return New(NULL); }

  PProbabilityIndexGridMap2D* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PProbabilityIndexGridMap2D& from);
  void MergeFrom(const PProbabilityIndexGridMap2D& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PProbabilityIndexGridMap2D* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated uint32 data = 7;
  int data_size() const;
  void clear_data();
  static const int kDataFieldNumber = 7;
  ::google::protobuf::uint32 data(int index) const;
  void set_data(int index, ::google::protobuf::uint32 value);
  void add_data(::google::protobuf::uint32 value);
  const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      data() const;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_data();

  // .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
  bool has_map_info() const;
  void clear_map_info();
  static const int kMapInfoFieldNumber = 1;
  const ::ZimaProto::Map::PDynamicMap2DInfo& map_info() const;
  ::ZimaProto::Map::PDynamicMap2DInfo* mutable_map_info();
  ::ZimaProto::Map::PDynamicMap2DInfo* release_map_info();
  void set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info);

  // float hit_probability_on_obstacle = 2;
  void clear_hit_probability_on_obstacle();
  static const int kHitProbabilityOnObstacleFieldNumber = 2;
  float hit_probability_on_obstacle() const;
  void set_hit_probability_on_obstacle(float value);

  // float miss_probability_on_obstacle = 3;
  void clear_miss_probability_on_obstacle();
  static const int kMissProbabilityOnObstacleFieldNumber = 3;
  float miss_probability_on_obstacle() const;
  void set_miss_probability_on_obstacle(float value);

  // float max_probability_for_obstacle_in_cell = 4;
  void clear_max_probability_for_obstacle_in_cell();
  static const int kMaxProbabilityForObstacleInCellFieldNumber = 4;
  float max_probability_for_obstacle_in_cell() const;
  void set_max_probability_for_obstacle_in_cell(float value);

  // float min_probability_for_obstacle_in_cell = 5;
  void clear_min_probability_for_obstacle_in_cell();
  static const int kMinProbabilityForObstacleInCellFieldNumber = 5;
  float min_probability_for_obstacle_in_cell() const;
  void set_min_probability_for_obstacle_in_cell(float value);

  // uint32 probability_count = 6;
  void clear_probability_count();
  static const int kProbabilityCountFieldNumber = 6;
  ::google::protobuf::uint32 probability_count() const;
  void set_probability_count(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > data_;
  mutable int _data_cached_byte_size_;
  ::ZimaProto::Map::PDynamicMap2DInfo* map_info_;
  float hit_probability_on_obstacle_;
  float miss_probability_on_obstacle_;
  float max_probability_for_obstacle_in_cell_;
  float min_probability_for_obstacle_in_cell_;
  ::google::protobuf::uint32 probability_count_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fprobability_5fmap_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PProbabilityIndexGridMap2D

// .ZimaProto.Map.PDynamicMap2DInfo map_info = 1;
inline bool PProbabilityIndexGridMap2D::has_map_info() const {
  return this != internal_default_instance() && map_info_ != NULL;
}
inline void PProbabilityIndexGridMap2D::clear_map_info() {
  if (GetArenaNoVirtual() == NULL && map_info_ != NULL) delete map_info_;
  map_info_ = NULL;
}
inline const ::ZimaProto::Map::PDynamicMap2DInfo& PProbabilityIndexGridMap2D::map_info() const {
  const ::ZimaProto::Map::PDynamicMap2DInfo* p = map_info_;
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PDynamicMap2DInfo*>(
      &::ZimaProto::Map::_PDynamicMap2DInfo_default_instance_);
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::mutable_map_info() {
  
  if (map_info_ == NULL) {
    map_info_ = new ::ZimaProto::Map::PDynamicMap2DInfo;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  return map_info_;
}
inline ::ZimaProto::Map::PDynamicMap2DInfo* PProbabilityIndexGridMap2D::release_map_info() {
  // @@protoc_insertion_point(field_release:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
  
  ::ZimaProto::Map::PDynamicMap2DInfo* temp = map_info_;
  map_info_ = NULL;
  return temp;
}
inline void PProbabilityIndexGridMap2D::set_allocated_map_info(::ZimaProto::Map::PDynamicMap2DInfo* map_info) {
  delete map_info_;
  map_info_ = map_info;
  if (map_info) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.map_info)
}

// float hit_probability_on_obstacle = 2;
inline void PProbabilityIndexGridMap2D::clear_hit_probability_on_obstacle() {
  hit_probability_on_obstacle_ = 0;
}
inline float PProbabilityIndexGridMap2D::hit_probability_on_obstacle() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.hit_probability_on_obstacle)
  return hit_probability_on_obstacle_;
}
inline void PProbabilityIndexGridMap2D::set_hit_probability_on_obstacle(float value) {
  
  hit_probability_on_obstacle_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.hit_probability_on_obstacle)
}

// float miss_probability_on_obstacle = 3;
inline void PProbabilityIndexGridMap2D::clear_miss_probability_on_obstacle() {
  miss_probability_on_obstacle_ = 0;
}
inline float PProbabilityIndexGridMap2D::miss_probability_on_obstacle() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.miss_probability_on_obstacle)
  return miss_probability_on_obstacle_;
}
inline void PProbabilityIndexGridMap2D::set_miss_probability_on_obstacle(float value) {
  
  miss_probability_on_obstacle_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.miss_probability_on_obstacle)
}

// float max_probability_for_obstacle_in_cell = 4;
inline void PProbabilityIndexGridMap2D::clear_max_probability_for_obstacle_in_cell() {
  max_probability_for_obstacle_in_cell_ = 0;
}
inline float PProbabilityIndexGridMap2D::max_probability_for_obstacle_in_cell() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.max_probability_for_obstacle_in_cell)
  return max_probability_for_obstacle_in_cell_;
}
inline void PProbabilityIndexGridMap2D::set_max_probability_for_obstacle_in_cell(float value) {
  
  max_probability_for_obstacle_in_cell_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.max_probability_for_obstacle_in_cell)
}

// float min_probability_for_obstacle_in_cell = 5;
inline void PProbabilityIndexGridMap2D::clear_min_probability_for_obstacle_in_cell() {
  min_probability_for_obstacle_in_cell_ = 0;
}
inline float PProbabilityIndexGridMap2D::min_probability_for_obstacle_in_cell() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.min_probability_for_obstacle_in_cell)
  return min_probability_for_obstacle_in_cell_;
}
inline void PProbabilityIndexGridMap2D::set_min_probability_for_obstacle_in_cell(float value) {
  
  min_probability_for_obstacle_in_cell_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.min_probability_for_obstacle_in_cell)
}

// uint32 probability_count = 6;
inline void PProbabilityIndexGridMap2D::clear_probability_count() {
  probability_count_ = 0u;
}
inline ::google::protobuf::uint32 PProbabilityIndexGridMap2D::probability_count() const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.probability_count)
  return probability_count_;
}
inline void PProbabilityIndexGridMap2D::set_probability_count(::google::protobuf::uint32 value) {
  
  probability_count_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.probability_count)
}

// repeated uint32 data = 7;
inline int PProbabilityIndexGridMap2D::data_size() const {
  return data_.size();
}
inline void PProbabilityIndexGridMap2D::clear_data() {
  data_.Clear();
}
inline ::google::protobuf::uint32 PProbabilityIndexGridMap2D::data(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return data_.Get(index);
}
inline void PProbabilityIndexGridMap2D::set_data(int index, ::google::protobuf::uint32 value) {
  data_.Set(index, value);
  // @@protoc_insertion_point(field_set:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
}
inline void PProbabilityIndexGridMap2D::add_data(::google::protobuf::uint32 value) {
  data_.Add(value);
  // @@protoc_insertion_point(field_add:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
PProbabilityIndexGridMap2D::data() const {
  // @@protoc_insertion_point(field_list:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return data_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
PProbabilityIndexGridMap2D::mutable_data() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D.data)
  return &data_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)


}  // namespace ProbabilityMap
}  // namespace ZimaProto

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zima_2fproto_2fprobability_5fmap_2eproto__INCLUDED
