// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/nav_data.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "zima/proto/nav_data.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/port.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ZimaProto {
namespace NavData {
class PRoomInfoDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PRoomInfo>
     _instance;
} _PRoomInfo_default_instance_;
class PVirtualWallDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PVirtualWall>
     _instance;
} _PVirtualWall_default_instance_;
class PBlockAreaDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PBlockArea>
     _instance;
} _PBlockArea_default_instance_;
class PNavData_RoomsInfoEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PNavData::PNavData_RoomsInfoEntry>
     _instance;
} _PNavData_RoomsInfoEntry_default_instance_;
class PNavData_VirtualWallsEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PNavData::PNavData_VirtualWallsEntry>
     _instance;
} _PNavData_VirtualWallsEntry_default_instance_;
class PNavData_BlockAreasEntryDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PNavData::PNavData_BlockAreasEntry>
     _instance;
} _PNavData_BlockAreasEntry_default_instance_;
class PNavDataDefaultTypeInternal {
public:
 ::google::protobuf::internal::ExplicitlyConstructed<PNavData>
     _instance;
} _PNavData_default_instance_;

namespace protobuf_zima_2fproto_2fnav_5fdata_2eproto {


namespace {

::google::protobuf::Metadata file_level_metadata[7];
const ::google::protobuf::EnumDescriptor* file_level_enum_descriptors[1];

}  // namespace

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTableField
    const TableStruct::entries[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  {0, 0, 0, ::google::protobuf::internal::kInvalidMask, 0, 0},
};

PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::AuxillaryParseTableField
    const TableStruct::aux[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ::google::protobuf::internal::AuxillaryParseTableField(),
};
PROTOBUF_CONSTEXPR_VAR ::google::protobuf::internal::ParseTable const
    TableStruct::schema[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
  { NULL, NULL, 0, -1, -1, -1, -1, NULL, false },
};

const ::google::protobuf::uint32 TableStruct::offsets[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRoomInfo, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRoomInfo, room_index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRoomInfo, room_bound_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRoomInfo, section_base_cell_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRoomInfo, section_x_range_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PRoomInfo, section_y_range_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVirtualWall, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVirtualWall, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVirtualWall, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVirtualWall, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVirtualWall, map_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVirtualWall, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBlockArea, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBlockArea, valid_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBlockArea, enable_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBlockArea, type_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBlockArea, map_value_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PBlockArea, points_),
  ~0u,  // no _has_bits_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, index_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, nav_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, slam_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, probability_map_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, slam_map_filename_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, rooms_info_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, virtual_walls_),
  GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PNavData, block_areas_),
};
static const ::google::protobuf::internal::MigrationSchema schemas[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(PRoomInfo)},
  { 10, -1, sizeof(PVirtualWall)},
  { 20, -1, sizeof(PBlockArea)},
  { 30, -1, sizeof(PNavData)},
};

static ::google::protobuf::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::google::protobuf::Message*>(&_PRoomInfo_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PVirtualWall_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PBlockArea_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PNavData_RoomsInfoEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PNavData_VirtualWallsEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PNavData_BlockAreasEntry_default_instance_),
  reinterpret_cast<const ::google::protobuf::Message*>(&_PNavData_default_instance_),
};

namespace {

void protobuf_AssignDescriptors() {
  AddDescriptors();
  ::google::protobuf::MessageFactory* factory = NULL;
  AssignDescriptors(
      "zima/proto/nav_data.proto", schemas, file_default_instances, TableStruct::offsets, factory,
      file_level_metadata, file_level_enum_descriptors, NULL);
file_level_metadata[3].reflection = PNavData::PNavData_RoomsInfoEntry::CreateReflection(file_level_metadata[3].descriptor, _PNavData_RoomsInfoEntry_default_instance_._instance.get_mutable());
file_level_metadata[4].reflection = PNavData::PNavData_VirtualWallsEntry::CreateReflection(file_level_metadata[4].descriptor, _PNavData_VirtualWallsEntry_default_instance_._instance.get_mutable());
file_level_metadata[5].reflection = PNavData::PNavData_BlockAreasEntry::CreateReflection(file_level_metadata[5].descriptor, _PNavData_BlockAreasEntry_default_instance_._instance.get_mutable());
}

void protobuf_AssignDescriptorsOnce() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &protobuf_AssignDescriptors);
}

void protobuf_RegisterTypes(const ::std::string&) GOOGLE_ATTRIBUTE_COLD;
void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::internal::RegisterAllTypes(file_level_metadata, 7);
}

}  // namespace
void TableStruct::InitDefaultsImpl() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::internal::InitProtobufDefaults();
  ::ZimaProto::Map::protobuf_zima_2fproto_2fmap_2eproto::InitDefaults();
  ::ZimaProto::ProbabilityMap::protobuf_zima_2fproto_2fprobability_5fmap_2eproto::InitDefaults();
  _PRoomInfo_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PRoomInfo_default_instance_);_PVirtualWall_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PVirtualWall_default_instance_);_PBlockArea_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PBlockArea_default_instance_);_PNavData_RoomsInfoEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PNavData_RoomsInfoEntry_default_instance_);_PNavData_VirtualWallsEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PNavData_VirtualWallsEntry_default_instance_);_PNavData_BlockAreasEntry_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PNavData_BlockAreasEntry_default_instance_);_PNavData_default_instance_._instance.DefaultConstruct();
  ::google::protobuf::internal::OnShutdownDestroyMessage(
      &_PNavData_default_instance_);_PRoomInfo_default_instance_._instance.get_mutable()->room_bound_ = const_cast< ::ZimaProto::Map::PMapCellBound*>(
      ::ZimaProto::Map::PMapCellBound::internal_default_instance());
  _PRoomInfo_default_instance_._instance.get_mutable()->section_base_cell_ = const_cast< ::ZimaProto::Map::PMapCell*>(
      ::ZimaProto::Map::PMapCell::internal_default_instance());
  _PNavData_RoomsInfoEntry_default_instance_._instance.get_mutable()->set_default_instance(_PNavData_RoomsInfoEntry_default_instance_._instance.get_mutable());
  _PNavData_RoomsInfoEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _PNavData_VirtualWallsEntry_default_instance_._instance.get_mutable()->set_default_instance(_PNavData_VirtualWallsEntry_default_instance_._instance.get_mutable());
  _PNavData_VirtualWallsEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _PNavData_BlockAreasEntry_default_instance_._instance.get_mutable()->set_default_instance(_PNavData_BlockAreasEntry_default_instance_._instance.get_mutable());
  _PNavData_BlockAreasEntry_default_instance_._instance.get_mutable()->InitAsDefaultInstance();
  _PNavData_default_instance_._instance.get_mutable()->nav_map_ = const_cast< ::ZimaProto::Map::PMultiLayerCharGridMap2D*>(
      ::ZimaProto::Map::PMultiLayerCharGridMap2D::internal_default_instance());
  _PNavData_default_instance_._instance.get_mutable()->slam_map_ = const_cast< ::ZimaProto::Map::PSlamValueGridMap2D*>(
      ::ZimaProto::Map::PSlamValueGridMap2D::internal_default_instance());
  _PNavData_default_instance_._instance.get_mutable()->probability_map_ = const_cast< ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D*>(
      ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D::internal_default_instance());
}

void InitDefaults() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &TableStruct::InitDefaultsImpl);
}
namespace {
void AddDescriptorsImpl() {
  InitDefaults();
  static const char descriptor[] GOOGLE_ATTRIBUTE_SECTION_VARIABLE(protodesc_cold) = {
      "\n\031zima/proto/nav_data.proto\022\021ZimaProto.N"
      "avData\032\024zima/proto/map.proto\032 zima/proto"
      "/probability_map.proto\"\267\001\n\tPRoomInfo\022\022\n\n"
      "room_index\030\001 \001(\t\0220\n\nroom_bound\030\002 \001(\0132\034.Z"
      "imaProto.Map.PMapCellBound\0222\n\021section_ba"
      "se_cell\030\003 \001(\0132\027.ZimaProto.Map.PMapCell\022\027"
      "\n\017section_x_range\030\004 \001(\r\022\027\n\017section_y_ran"
      "ge\030\005 \001(\r\"\233\001\n\014PVirtualWall\022\r\n\005valid\030\001 \001(\010"
      "\022\016\n\006enable\030\002 \001(\010\022/\n\004type\030\003 \001(\0162!.ZimaPro"
      "to.NavData.PUserBlockType\022\021\n\tmap_value\030\004"
      " \001(\t\022(\n\006points\030\005 \003(\0132\030.ZimaProto.Map.PMa"
      "pPoint\"\231\001\n\nPBlockArea\022\r\n\005valid\030\001 \001(\010\022\016\n\006"
      "enable\030\002 \001(\010\022/\n\004type\030\003 \001(\0162!.ZimaProto.N"
      "avData.PUserBlockType\022\021\n\tmap_value\030\004 \001(\t"
      "\022(\n\006points\030\005 \003(\0132\030.ZimaProto.Map.PMapPoi"
      "nt\"\263\005\n\010PNavData\022\r\n\005index\030\001 \001(\r\0228\n\007nav_ma"
      "p\030\002 \001(\0132\'.ZimaProto.Map.PMultiLayerCharG"
      "ridMap2D\0224\n\010slam_map\030\003 \001(\0132\".ZimaProto.M"
      "ap.PSlamValueGridMap2D\022M\n\017probability_ma"
      "p\030\004 \001(\01324.ZimaProto.ProbabilityMap.PProb"
      "abilityIndexGridMap2D\022\031\n\021slam_map_filena"
      "me\030\005 \001(\t\022>\n\nrooms_info\030\006 \003(\0132*.ZimaProto"
      ".NavData.PNavData.RoomsInfoEntry\022D\n\rvirt"
      "ual_walls\030\007 \003(\0132-.ZimaProto.NavData.PNav"
      "Data.VirtualWallsEntry\022@\n\013block_areas\030\010 "
      "\003(\0132+.ZimaProto.NavData.PNavData.BlockAr"
      "easEntry\032N\n\016RoomsInfoEntry\022\013\n\003key\030\001 \001(\t\022"
      "+\n\005value\030\002 \001(\0132\034.ZimaProto.NavData.PRoom"
      "Info:\0028\001\032T\n\021VirtualWallsEntry\022\013\n\003key\030\001 \001"
      "(\r\022.\n\005value\030\002 \001(\0132\037.ZimaProto.NavData.PV"
      "irtualWall:\0028\001\032P\n\017BlockAreasEntry\022\013\n\003key"
      "\030\001 \001(\r\022,\n\005value\030\002 \001(\0132\035.ZimaProto.NavDat"
      "a.PBlockArea:\0028\001*J\n\016PUserBlockType\022\020\n\014kS"
      "trictBlock\020\000\022\024\n\020kAvoidWaterBlock\020\001\022\020\n\014kC"
      "arpetBlock\020\002b\006proto3"
  };
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
      descriptor, 1380);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "zima/proto/nav_data.proto", &protobuf_RegisterTypes);
  ::ZimaProto::Map::protobuf_zima_2fproto_2fmap_2eproto::AddDescriptors();
  ::ZimaProto::ProbabilityMap::protobuf_zima_2fproto_2fprobability_5fmap_2eproto::AddDescriptors();
}
} // anonymous namespace

void AddDescriptors() {
  static GOOGLE_PROTOBUF_DECLARE_ONCE(once);
  ::google::protobuf::GoogleOnceInit(&once, &AddDescriptorsImpl);
}
// Force AddDescriptors() to be called at dynamic initialization time.
struct StaticDescriptorInitializer {
  StaticDescriptorInitializer() {
    AddDescriptors();
  }
} static_descriptor_initializer;

}  // namespace protobuf_zima_2fproto_2fnav_5fdata_2eproto

const ::google::protobuf::EnumDescriptor* PUserBlockType_descriptor() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_enum_descriptors[0];
}
bool PUserBlockType_IsValid(int value) {
  switch (value) {
    case 0:
    case 1:
    case 2:
      return true;
    default:
      return false;
  }
}


// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PRoomInfo::kRoomIndexFieldNumber;
const int PRoomInfo::kRoomBoundFieldNumber;
const int PRoomInfo::kSectionBaseCellFieldNumber;
const int PRoomInfo::kSectionXRangeFieldNumber;
const int PRoomInfo::kSectionYRangeFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PRoomInfo::PRoomInfo()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.NavData.PRoomInfo)
}
PRoomInfo::PRoomInfo(const PRoomInfo& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  room_index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.room_index().size() > 0) {
    room_index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_index_);
  }
  if (from.has_room_bound()) {
    room_bound_ = new ::ZimaProto::Map::PMapCellBound(*from.room_bound_);
  } else {
    room_bound_ = NULL;
  }
  if (from.has_section_base_cell()) {
    section_base_cell_ = new ::ZimaProto::Map::PMapCell(*from.section_base_cell_);
  } else {
    section_base_cell_ = NULL;
  }
  ::memcpy(&section_x_range_, &from.section_x_range_,
    static_cast<size_t>(reinterpret_cast<char*>(&section_y_range_) -
    reinterpret_cast<char*>(&section_x_range_)) + sizeof(section_y_range_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PRoomInfo)
}

void PRoomInfo::SharedCtor() {
  room_index_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&room_bound_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&section_y_range_) -
      reinterpret_cast<char*>(&room_bound_)) + sizeof(section_y_range_));
  _cached_size_ = 0;
}

PRoomInfo::~PRoomInfo() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PRoomInfo)
  SharedDtor();
}

void PRoomInfo::SharedDtor() {
  room_index_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete room_bound_;
  if (this != internal_default_instance()) delete section_base_cell_;
}

void PRoomInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PRoomInfo::descriptor() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PRoomInfo& PRoomInfo::default_instance() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PRoomInfo* PRoomInfo::New(::google::protobuf::Arena* arena) const {
  PRoomInfo* n = new PRoomInfo;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PRoomInfo::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  room_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && room_bound_ != NULL) {
    delete room_bound_;
  }
  room_bound_ = NULL;
  if (GetArenaNoVirtual() == NULL && section_base_cell_ != NULL) {
    delete section_base_cell_;
  }
  section_base_cell_ = NULL;
  ::memset(&section_x_range_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&section_y_range_) -
      reinterpret_cast<char*>(&section_x_range_)) + sizeof(section_y_range_));
  _internal_metadata_.Clear();
}

bool PRoomInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.NavData.PRoomInfo)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // string room_index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(10u /* 10 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_room_index()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->room_index().data(), static_cast<int>(this->room_index().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.NavData.PRoomInfo.room_index"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.Map.PMapCellBound room_bound = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_room_bound()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.Map.PMapCell section_base_cell = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_section_base_cell()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 section_x_range = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(32u /* 32 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_x_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // uint32 section_y_range = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(40u /* 40 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &section_y_range_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.NavData.PRoomInfo)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.NavData.PRoomInfo)
  return false;
#undef DO_
}

void PRoomInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.NavData.PRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_index = 1;
  if (this->room_index().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_index().data(), static_cast<int>(this->room_index().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PRoomInfo.room_index");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      1, this->room_index(), output);
  }

  // .ZimaProto.Map.PMapCellBound room_bound = 2;
  if (this->has_room_bound()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->room_bound_, output);
  }

  // .ZimaProto.Map.PMapCell section_base_cell = 3;
  if (this->has_section_base_cell()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->section_base_cell_, output);
  }

  // uint32 section_x_range = 4;
  if (this->section_x_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->section_x_range(), output);
  }

  // uint32 section_y_range = 5;
  if (this->section_y_range() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->section_y_range(), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.NavData.PRoomInfo)
}

::google::protobuf::uint8* PRoomInfo::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PRoomInfo)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string room_index = 1;
  if (this->room_index().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->room_index().data(), static_cast<int>(this->room_index().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PRoomInfo.room_index");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->room_index(), target);
  }

  // .ZimaProto.Map.PMapCellBound room_bound = 2;
  if (this->has_room_bound()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->room_bound_, deterministic, target);
  }

  // .ZimaProto.Map.PMapCell section_base_cell = 3;
  if (this->has_section_base_cell()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->section_base_cell_, deterministic, target);
  }

  // uint32 section_x_range = 4;
  if (this->section_x_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->section_x_range(), target);
  }

  // uint32 section_y_range = 5;
  if (this->section_y_range() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->section_y_range(), target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PRoomInfo)
  return target;
}

size_t PRoomInfo::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PRoomInfo)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // string room_index = 1;
  if (this->room_index().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->room_index());
  }

  // .ZimaProto.Map.PMapCellBound room_bound = 2;
  if (this->has_room_bound()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->room_bound_);
  }

  // .ZimaProto.Map.PMapCell section_base_cell = 3;
  if (this->has_section_base_cell()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->section_base_cell_);
  }

  // uint32 section_x_range = 4;
  if (this->section_x_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->section_x_range());
  }

  // uint32 section_y_range = 5;
  if (this->section_y_range() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->section_y_range());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PRoomInfo::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.NavData.PRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  const PRoomInfo* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PRoomInfo>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.NavData.PRoomInfo)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.NavData.PRoomInfo)
    MergeFrom(*source);
  }
}

void PRoomInfo::MergeFrom(const PRoomInfo& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PRoomInfo)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.room_index().size() > 0) {

    room_index_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.room_index_);
  }
  if (from.has_room_bound()) {
    mutable_room_bound()->::ZimaProto::Map::PMapCellBound::MergeFrom(from.room_bound());
  }
  if (from.has_section_base_cell()) {
    mutable_section_base_cell()->::ZimaProto::Map::PMapCell::MergeFrom(from.section_base_cell());
  }
  if (from.section_x_range() != 0) {
    set_section_x_range(from.section_x_range());
  }
  if (from.section_y_range() != 0) {
    set_section_y_range(from.section_y_range());
  }
}

void PRoomInfo::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.NavData.PRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PRoomInfo::CopyFrom(const PRoomInfo& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PRoomInfo)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PRoomInfo::IsInitialized() const {
  return true;
}

void PRoomInfo::Swap(PRoomInfo* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PRoomInfo::InternalSwap(PRoomInfo* other) {
  using std::swap;
  room_index_.Swap(&other->room_index_);
  swap(room_bound_, other->room_bound_);
  swap(section_base_cell_, other->section_base_cell_);
  swap(section_x_range_, other->section_x_range_);
  swap(section_y_range_, other->section_y_range_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PRoomInfo::GetMetadata() const {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PRoomInfo

// string room_index = 1;
void PRoomInfo::clear_room_index() {
  room_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PRoomInfo::room_index() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.room_index)
  return room_index_.GetNoArena();
}
void PRoomInfo::set_room_index(const ::std::string& value) {
  
  room_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PRoomInfo.room_index)
}
#if LANG_CXX11
void PRoomInfo::set_room_index(::std::string&& value) {
  
  room_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PRoomInfo.room_index)
}
#endif
void PRoomInfo::set_room_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PRoomInfo.room_index)
}
void PRoomInfo::set_room_index(const char* value, size_t size) {
  
  room_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PRoomInfo.room_index)
}
::std::string* PRoomInfo::mutable_room_index() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PRoomInfo.room_index)
  return room_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PRoomInfo::release_room_index() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PRoomInfo.room_index)
  
  return room_index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PRoomInfo::set_allocated_room_index(::std::string* room_index) {
  if (room_index != NULL) {
    
  } else {
    
  }
  room_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_index);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PRoomInfo.room_index)
}

// .ZimaProto.Map.PMapCellBound room_bound = 2;
bool PRoomInfo::has_room_bound() const {
  return this != internal_default_instance() && room_bound_ != NULL;
}
void PRoomInfo::clear_room_bound() {
  if (GetArenaNoVirtual() == NULL && room_bound_ != NULL) delete room_bound_;
  room_bound_ = NULL;
}
const ::ZimaProto::Map::PMapCellBound& PRoomInfo::room_bound() const {
  const ::ZimaProto::Map::PMapCellBound* p = room_bound_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.room_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapCellBound*>(
      &::ZimaProto::Map::_PMapCellBound_default_instance_);
}
::ZimaProto::Map::PMapCellBound* PRoomInfo::mutable_room_bound() {
  
  if (room_bound_ == NULL) {
    room_bound_ = new ::ZimaProto::Map::PMapCellBound;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PRoomInfo.room_bound)
  return room_bound_;
}
::ZimaProto::Map::PMapCellBound* PRoomInfo::release_room_bound() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PRoomInfo.room_bound)
  
  ::ZimaProto::Map::PMapCellBound* temp = room_bound_;
  room_bound_ = NULL;
  return temp;
}
void PRoomInfo::set_allocated_room_bound(::ZimaProto::Map::PMapCellBound* room_bound) {
  delete room_bound_;
  room_bound_ = room_bound;
  if (room_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PRoomInfo.room_bound)
}

// .ZimaProto.Map.PMapCell section_base_cell = 3;
bool PRoomInfo::has_section_base_cell() const {
  return this != internal_default_instance() && section_base_cell_ != NULL;
}
void PRoomInfo::clear_section_base_cell() {
  if (GetArenaNoVirtual() == NULL && section_base_cell_ != NULL) delete section_base_cell_;
  section_base_cell_ = NULL;
}
const ::ZimaProto::Map::PMapCell& PRoomInfo::section_base_cell() const {
  const ::ZimaProto::Map::PMapCell* p = section_base_cell_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.section_base_cell)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapCell*>(
      &::ZimaProto::Map::_PMapCell_default_instance_);
}
::ZimaProto::Map::PMapCell* PRoomInfo::mutable_section_base_cell() {
  
  if (section_base_cell_ == NULL) {
    section_base_cell_ = new ::ZimaProto::Map::PMapCell;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PRoomInfo.section_base_cell)
  return section_base_cell_;
}
::ZimaProto::Map::PMapCell* PRoomInfo::release_section_base_cell() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PRoomInfo.section_base_cell)
  
  ::ZimaProto::Map::PMapCell* temp = section_base_cell_;
  section_base_cell_ = NULL;
  return temp;
}
void PRoomInfo::set_allocated_section_base_cell(::ZimaProto::Map::PMapCell* section_base_cell) {
  delete section_base_cell_;
  section_base_cell_ = section_base_cell;
  if (section_base_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PRoomInfo.section_base_cell)
}

// uint32 section_x_range = 4;
void PRoomInfo::clear_section_x_range() {
  section_x_range_ = 0u;
}
::google::protobuf::uint32 PRoomInfo::section_x_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.section_x_range)
  return section_x_range_;
}
void PRoomInfo::set_section_x_range(::google::protobuf::uint32 value) {
  
  section_x_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PRoomInfo.section_x_range)
}

// uint32 section_y_range = 5;
void PRoomInfo::clear_section_y_range() {
  section_y_range_ = 0u;
}
::google::protobuf::uint32 PRoomInfo::section_y_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.section_y_range)
  return section_y_range_;
}
void PRoomInfo::set_section_y_range(::google::protobuf::uint32 value) {
  
  section_y_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PRoomInfo.section_y_range)
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PVirtualWall::kValidFieldNumber;
const int PVirtualWall::kEnableFieldNumber;
const int PVirtualWall::kTypeFieldNumber;
const int PVirtualWall::kMapValueFieldNumber;
const int PVirtualWall::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PVirtualWall::PVirtualWall()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.NavData.PVirtualWall)
}
PVirtualWall::PVirtualWall(const PVirtualWall& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_value().size() > 0) {
    map_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_value_);
  }
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PVirtualWall)
}

void PVirtualWall::SharedCtor() {
  map_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(type_));
  _cached_size_ = 0;
}

PVirtualWall::~PVirtualWall() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PVirtualWall)
  SharedDtor();
}

void PVirtualWall::SharedDtor() {
  map_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PVirtualWall::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVirtualWall::descriptor() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PVirtualWall& PVirtualWall::default_instance() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PVirtualWall* PVirtualWall::New(::google::protobuf::Arena* arena) const {
  PVirtualWall* n = new PVirtualWall;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PVirtualWall::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PVirtualWall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  map_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool PVirtualWall::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.NavData.PVirtualWall)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.NavData.PUserBlockType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ZimaProto::NavData::PUserBlockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_value().data(), static_cast<int>(this->map_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.NavData.PVirtualWall.map_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ZimaProto.Map.PMapPoint points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.NavData.PVirtualWall)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.NavData.PVirtualWall)
  return false;
#undef DO_
}

void PVirtualWall::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.NavData.PVirtualWall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string map_value = 4;
  if (this->map_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_value().data(), static_cast<int>(this->map_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PVirtualWall.map_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->map_value(), output);
  }

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.NavData.PVirtualWall)
}

::google::protobuf::uint8* PVirtualWall::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PVirtualWall)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string map_value = 4;
  if (this->map_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_value().data(), static_cast<int>(this->map_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PVirtualWall.map_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->map_value(), target);
  }

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PVirtualWall)
  return target;
}

size_t PVirtualWall::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PVirtualWall)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ZimaProto.Map.PMapPoint points = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(static_cast<int>(i)));
    }
  }

  // string map_value = 4;
  if (this->map_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_value());
  }

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVirtualWall::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.NavData.PVirtualWall)
  GOOGLE_DCHECK_NE(&from, this);
  const PVirtualWall* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PVirtualWall>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.NavData.PVirtualWall)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.NavData.PVirtualWall)
    MergeFrom(*source);
  }
}

void PVirtualWall::MergeFrom(const PVirtualWall& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PVirtualWall)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.map_value().size() > 0) {

    map_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_value_);
  }
  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PVirtualWall::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.NavData.PVirtualWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVirtualWall::CopyFrom(const PVirtualWall& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PVirtualWall)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVirtualWall::IsInitialized() const {
  return true;
}

void PVirtualWall::Swap(PVirtualWall* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PVirtualWall::InternalSwap(PVirtualWall* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  map_value_.Swap(&other->map_value_);
  swap(valid_, other->valid_);
  swap(enable_, other->enable_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PVirtualWall::GetMetadata() const {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PVirtualWall

// bool valid = 1;
void PVirtualWall::clear_valid() {
  valid_ = false;
}
bool PVirtualWall::valid() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.valid)
  return valid_;
}
void PVirtualWall::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.valid)
}

// bool enable = 2;
void PVirtualWall::clear_enable() {
  enable_ = false;
}
bool PVirtualWall::enable() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.enable)
  return enable_;
}
void PVirtualWall::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.enable)
}

// .ZimaProto.NavData.PUserBlockType type = 3;
void PVirtualWall::clear_type() {
  type_ = 0;
}
::ZimaProto::NavData::PUserBlockType PVirtualWall::type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.type)
  return static_cast< ::ZimaProto::NavData::PUserBlockType >(type_);
}
void PVirtualWall::set_type(::ZimaProto::NavData::PUserBlockType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.type)
}

// string map_value = 4;
void PVirtualWall::clear_map_value() {
  map_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PVirtualWall::map_value() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.map_value)
  return map_value_.GetNoArena();
}
void PVirtualWall::set_map_value(const ::std::string& value) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.map_value)
}
#if LANG_CXX11
void PVirtualWall::set_map_value(::std::string&& value) {
  
  map_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PVirtualWall.map_value)
}
#endif
void PVirtualWall::set_map_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PVirtualWall.map_value)
}
void PVirtualWall::set_map_value(const char* value, size_t size) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PVirtualWall.map_value)
}
::std::string* PVirtualWall::mutable_map_value() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PVirtualWall.map_value)
  return map_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PVirtualWall::release_map_value() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PVirtualWall.map_value)
  
  return map_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PVirtualWall::set_allocated_map_value(::std::string* map_value) {
  if (map_value != NULL) {
    
  } else {
    
  }
  map_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_value);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PVirtualWall.map_value)
}

// repeated .ZimaProto.Map.PMapPoint points = 5;
int PVirtualWall::points_size() const {
  return points_.size();
}
void PVirtualWall::clear_points() {
  points_.Clear();
}
const ::ZimaProto::Map::PMapPoint& PVirtualWall::points(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.points)
  return points_.Get(index);
}
::ZimaProto::Map::PMapPoint* PVirtualWall::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PVirtualWall.points)
  return points_.Mutable(index);
}
::ZimaProto::Map::PMapPoint* PVirtualWall::add_points() {
  // @@protoc_insertion_point(field_add:ZimaProto.NavData.PVirtualWall.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >*
PVirtualWall::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.NavData.PVirtualWall.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >&
PVirtualWall::points() const {
  // @@protoc_insertion_point(field_list:ZimaProto.NavData.PVirtualWall.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PBlockArea::kValidFieldNumber;
const int PBlockArea::kEnableFieldNumber;
const int PBlockArea::kTypeFieldNumber;
const int PBlockArea::kMapValueFieldNumber;
const int PBlockArea::kPointsFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PBlockArea::PBlockArea()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.NavData.PBlockArea)
}
PBlockArea::PBlockArea(const PBlockArea& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      points_(from.points_),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  map_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.map_value().size() > 0) {
    map_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_value_);
  }
  ::memcpy(&valid_, &from.valid_,
    static_cast<size_t>(reinterpret_cast<char*>(&type_) -
    reinterpret_cast<char*>(&valid_)) + sizeof(type_));
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PBlockArea)
}

void PBlockArea::SharedCtor() {
  map_value_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(type_));
  _cached_size_ = 0;
}

PBlockArea::~PBlockArea() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PBlockArea)
  SharedDtor();
}

void PBlockArea::SharedDtor() {
  map_value_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}

void PBlockArea::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PBlockArea::descriptor() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PBlockArea& PBlockArea::default_instance() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PBlockArea* PBlockArea::New(::google::protobuf::Arena* arena) const {
  PBlockArea* n = new PBlockArea;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PBlockArea::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PBlockArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  points_.Clear();
  map_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&valid_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&type_) -
      reinterpret_cast<char*>(&valid_)) + sizeof(type_));
  _internal_metadata_.Clear();
}

bool PBlockArea::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.NavData.PBlockArea)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // bool valid = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &valid_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // bool enable = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(16u /* 16 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &enable_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.NavData.PUserBlockType type = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(24u /* 24 & 0xFF */)) {
          int value;
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   int, ::google::protobuf::internal::WireFormatLite::TYPE_ENUM>(
                 input, &value)));
          set_type(static_cast< ::ZimaProto::NavData::PUserBlockType >(value));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string map_value = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_map_value()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->map_value().data(), static_cast<int>(this->map_value().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.NavData.PBlockArea.map_value"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // repeated .ZimaProto.Map.PMapPoint points = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_points()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.NavData.PBlockArea)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.NavData.PBlockArea)
  return false;
#undef DO_
}

void PBlockArea::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.NavData.PBlockArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->valid(), output);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->enable(), output);
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->type() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteEnum(
      3, this->type(), output);
  }

  // string map_value = 4;
  if (this->map_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_value().data(), static_cast<int>(this->map_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PBlockArea.map_value");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      4, this->map_value(), output);
  }

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->points(static_cast<int>(i)), output);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.NavData.PBlockArea)
}

::google::protobuf::uint8* PBlockArea::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PBlockArea)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // bool valid = 1;
  if (this->valid() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->valid(), target);
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->enable(), target);
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->type() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteEnumToArray(
      3, this->type(), target);
  }

  // string map_value = 4;
  if (this->map_value().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->map_value().data(), static_cast<int>(this->map_value().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PBlockArea.map_value");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->map_value(), target);
  }

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->points_size()); i < n; i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        5, this->points(static_cast<int>(i)), deterministic, target);
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PBlockArea)
  return target;
}

size_t PBlockArea::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PBlockArea)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // repeated .ZimaProto.Map.PMapPoint points = 5;
  {
    unsigned int count = static_cast<unsigned int>(this->points_size());
    total_size += 1UL * count;
    for (unsigned int i = 0; i < count; i++) {
      total_size +=
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->points(static_cast<int>(i)));
    }
  }

  // string map_value = 4;
  if (this->map_value().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->map_value());
  }

  // bool valid = 1;
  if (this->valid() != 0) {
    total_size += 1 + 1;
  }

  // bool enable = 2;
  if (this->enable() != 0) {
    total_size += 1 + 1;
  }

  // .ZimaProto.NavData.PUserBlockType type = 3;
  if (this->type() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::EnumSize(this->type());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PBlockArea::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.NavData.PBlockArea)
  GOOGLE_DCHECK_NE(&from, this);
  const PBlockArea* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PBlockArea>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.NavData.PBlockArea)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.NavData.PBlockArea)
    MergeFrom(*source);
  }
}

void PBlockArea::MergeFrom(const PBlockArea& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PBlockArea)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  points_.MergeFrom(from.points_);
  if (from.map_value().size() > 0) {

    map_value_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.map_value_);
  }
  if (from.valid() != 0) {
    set_valid(from.valid());
  }
  if (from.enable() != 0) {
    set_enable(from.enable());
  }
  if (from.type() != 0) {
    set_type(from.type());
  }
}

void PBlockArea::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.NavData.PBlockArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PBlockArea::CopyFrom(const PBlockArea& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PBlockArea)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PBlockArea::IsInitialized() const {
  return true;
}

void PBlockArea::Swap(PBlockArea* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PBlockArea::InternalSwap(PBlockArea* other) {
  using std::swap;
  points_.InternalSwap(&other->points_);
  map_value_.Swap(&other->map_value_);
  swap(valid_, other->valid_);
  swap(enable_, other->enable_);
  swap(type_, other->type_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PBlockArea::GetMetadata() const {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PBlockArea

// bool valid = 1;
void PBlockArea::clear_valid() {
  valid_ = false;
}
bool PBlockArea::valid() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.valid)
  return valid_;
}
void PBlockArea::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.valid)
}

// bool enable = 2;
void PBlockArea::clear_enable() {
  enable_ = false;
}
bool PBlockArea::enable() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.enable)
  return enable_;
}
void PBlockArea::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.enable)
}

// .ZimaProto.NavData.PUserBlockType type = 3;
void PBlockArea::clear_type() {
  type_ = 0;
}
::ZimaProto::NavData::PUserBlockType PBlockArea::type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.type)
  return static_cast< ::ZimaProto::NavData::PUserBlockType >(type_);
}
void PBlockArea::set_type(::ZimaProto::NavData::PUserBlockType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.type)
}

// string map_value = 4;
void PBlockArea::clear_map_value() {
  map_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PBlockArea::map_value() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.map_value)
  return map_value_.GetNoArena();
}
void PBlockArea::set_map_value(const ::std::string& value) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.map_value)
}
#if LANG_CXX11
void PBlockArea::set_map_value(::std::string&& value) {
  
  map_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PBlockArea.map_value)
}
#endif
void PBlockArea::set_map_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PBlockArea.map_value)
}
void PBlockArea::set_map_value(const char* value, size_t size) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PBlockArea.map_value)
}
::std::string* PBlockArea::mutable_map_value() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PBlockArea.map_value)
  return map_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PBlockArea::release_map_value() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PBlockArea.map_value)
  
  return map_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PBlockArea::set_allocated_map_value(::std::string* map_value) {
  if (map_value != NULL) {
    
  } else {
    
  }
  map_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_value);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PBlockArea.map_value)
}

// repeated .ZimaProto.Map.PMapPoint points = 5;
int PBlockArea::points_size() const {
  return points_.size();
}
void PBlockArea::clear_points() {
  points_.Clear();
}
const ::ZimaProto::Map::PMapPoint& PBlockArea::points(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.points)
  return points_.Get(index);
}
::ZimaProto::Map::PMapPoint* PBlockArea::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PBlockArea.points)
  return points_.Mutable(index);
}
::ZimaProto::Map::PMapPoint* PBlockArea::add_points() {
  // @@protoc_insertion_point(field_add:ZimaProto.NavData.PBlockArea.points)
  return points_.Add();
}
::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >*
PBlockArea::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.NavData.PBlockArea.points)
  return &points_;
}
const ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >&
PBlockArea::points() const {
  // @@protoc_insertion_point(field_list:ZimaProto.NavData.PBlockArea.points)
  return points_;
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PNavData::PNavData_RoomsInfoEntry::PNavData_RoomsInfoEntry() {}
PNavData::PNavData_RoomsInfoEntry::PNavData_RoomsInfoEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata PNavData::PNavData_RoomsInfoEntry::GetMetadata() const {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[3];
}
void PNavData::PNavData_RoomsInfoEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void PNavData::PNavData_RoomsInfoEntry::MergeFrom(const PNavData_RoomsInfoEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PNavData::PNavData_VirtualWallsEntry::PNavData_VirtualWallsEntry() {}
PNavData::PNavData_VirtualWallsEntry::PNavData_VirtualWallsEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata PNavData::PNavData_VirtualWallsEntry::GetMetadata() const {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[4];
}
void PNavData::PNavData_VirtualWallsEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void PNavData::PNavData_VirtualWallsEntry::MergeFrom(const PNavData_VirtualWallsEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

PNavData::PNavData_BlockAreasEntry::PNavData_BlockAreasEntry() {}
PNavData::PNavData_BlockAreasEntry::PNavData_BlockAreasEntry(::google::protobuf::Arena* arena) : SuperType(arena) {}
::google::protobuf::Metadata PNavData::PNavData_BlockAreasEntry::GetMetadata() const {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[5];
}
void PNavData::PNavData_BlockAreasEntry::MergeFrom(
    const ::google::protobuf::Message& other) {
  ::google::protobuf::Message::MergeFrom(other);
}
void PNavData::PNavData_BlockAreasEntry::MergeFrom(const PNavData_BlockAreasEntry& other) {
  MergeFromInternal(other);
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// ===================================================================

#if !defined(_MSC_VER) || _MSC_VER >= 1900
const int PNavData::kIndexFieldNumber;
const int PNavData::kNavMapFieldNumber;
const int PNavData::kSlamMapFieldNumber;
const int PNavData::kProbabilityMapFieldNumber;
const int PNavData::kSlamMapFilenameFieldNumber;
const int PNavData::kRoomsInfoFieldNumber;
const int PNavData::kVirtualWallsFieldNumber;
const int PNavData::kBlockAreasFieldNumber;
#endif  // !defined(_MSC_VER) || _MSC_VER >= 1900

PNavData::PNavData()
  : ::google::protobuf::Message(), _internal_metadata_(NULL) {
  if (GOOGLE_PREDICT_TRUE(this != internal_default_instance())) {
    protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  }
  SharedCtor();
  // @@protoc_insertion_point(constructor:ZimaProto.NavData.PNavData)
}
PNavData::PNavData(const PNavData& from)
  : ::google::protobuf::Message(),
      _internal_metadata_(NULL),
      _cached_size_(0) {
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  rooms_info_.MergeFrom(from.rooms_info_);
  virtual_walls_.MergeFrom(from.virtual_walls_);
  block_areas_.MergeFrom(from.block_areas_);
  slam_map_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (from.slam_map_filename().size() > 0) {
    slam_map_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slam_map_filename_);
  }
  if (from.has_nav_map()) {
    nav_map_ = new ::ZimaProto::Map::PMultiLayerCharGridMap2D(*from.nav_map_);
  } else {
    nav_map_ = NULL;
  }
  if (from.has_slam_map()) {
    slam_map_ = new ::ZimaProto::Map::PSlamValueGridMap2D(*from.slam_map_);
  } else {
    slam_map_ = NULL;
  }
  if (from.has_probability_map()) {
    probability_map_ = new ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D(*from.probability_map_);
  } else {
    probability_map_ = NULL;
  }
  index_ = from.index_;
  // @@protoc_insertion_point(copy_constructor:ZimaProto.NavData.PNavData)
}

void PNavData::SharedCtor() {
  slam_map_filename_.UnsafeSetDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  ::memset(&nav_map_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&index_) -
      reinterpret_cast<char*>(&nav_map_)) + sizeof(index_));
  _cached_size_ = 0;
}

PNavData::~PNavData() {
  // @@protoc_insertion_point(destructor:ZimaProto.NavData.PNavData)
  SharedDtor();
}

void PNavData::SharedDtor() {
  slam_map_filename_.DestroyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete nav_map_;
  if (this != internal_default_instance()) delete slam_map_;
  if (this != internal_default_instance()) delete probability_map_;
}

void PNavData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PNavData::descriptor() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages].descriptor;
}

const PNavData& PNavData::default_instance() {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::InitDefaults();
  return *internal_default_instance();
}

PNavData* PNavData::New(::google::protobuf::Arena* arena) const {
  PNavData* n = new PNavData;
  if (arena != NULL) {
    arena->Own(n);
  }
  return n;
}

void PNavData::Clear() {
// @@protoc_insertion_point(message_clear_start:ZimaProto.NavData.PNavData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  rooms_info_.Clear();
  virtual_walls_.Clear();
  block_areas_.Clear();
  slam_map_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
  if (GetArenaNoVirtual() == NULL && nav_map_ != NULL) {
    delete nav_map_;
  }
  nav_map_ = NULL;
  if (GetArenaNoVirtual() == NULL && slam_map_ != NULL) {
    delete slam_map_;
  }
  slam_map_ = NULL;
  if (GetArenaNoVirtual() == NULL && probability_map_ != NULL) {
    delete probability_map_;
  }
  probability_map_ = NULL;
  index_ = 0u;
  _internal_metadata_.Clear();
}

bool PNavData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!GOOGLE_PREDICT_TRUE(EXPRESSION)) goto failure
  ::google::protobuf::uint32 tag;
  // @@protoc_insertion_point(parse_start:ZimaProto.NavData.PNavData)
  for (;;) {
    ::std::pair< ::google::protobuf::uint32, bool> p = input->ReadTagWithCutoffNoLastTag(127u);
    tag = p.first;
    if (!p.second) goto handle_unusual;
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // uint32 index = 1;
      case 1: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(8u /* 8 & 0xFF */)) {

          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &index_)));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
      case 2: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(18u /* 18 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nav_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
      case 3: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(26u /* 26 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_slam_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
      case 4: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(34u /* 34 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_probability_map()));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // string slam_map_filename = 5;
      case 5: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(42u /* 42 & 0xFF */)) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_slam_map_filename()));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            this->slam_map_filename().data(), static_cast<int>(this->slam_map_filename().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.NavData.PNavData.slam_map_filename"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
      case 6: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(50u /* 50 & 0xFF */)) {
          PNavData_RoomsInfoEntry::Parser< ::google::protobuf::internal::MapField<
              PNavData_RoomsInfoEntry,
              ::std::string, ::ZimaProto::NavData::PRoomInfo,
              ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo > > parser(&rooms_info_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
          DO_(::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
            parser.key().data(), static_cast<int>(parser.key().length()),
            ::google::protobuf::internal::WireFormatLite::PARSE,
            "ZimaProto.NavData.PNavData.RoomsInfoEntry.key"));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
      case 7: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(58u /* 58 & 0xFF */)) {
          PNavData_VirtualWallsEntry::Parser< ::google::protobuf::internal::MapField<
              PNavData_VirtualWallsEntry,
              ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall > > parser(&virtual_walls_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
      case 8: {
        if (static_cast< ::google::protobuf::uint8>(tag) ==
            static_cast< ::google::protobuf::uint8>(66u /* 66 & 0xFF */)) {
          PNavData_BlockAreasEntry::Parser< ::google::protobuf::internal::MapField<
              PNavData_BlockAreasEntry,
              ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea,
              ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
              ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
              0 >,
            ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea > > parser(&block_areas_);
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
              input, &parser));
        } else {
          goto handle_unusual;
        }
        break;
      }

      default: {
      handle_unusual:
        if (tag == 0) {
          goto success;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, _internal_metadata_.mutable_unknown_fields()));
        break;
      }
    }
  }
success:
  // @@protoc_insertion_point(parse_success:ZimaProto.NavData.PNavData)
  return true;
failure:
  // @@protoc_insertion_point(parse_failure:ZimaProto.NavData.PNavData)
  return false;
#undef DO_
}

void PNavData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // @@protoc_insertion_point(serialize_start:ZimaProto.NavData.PNavData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->index(), output);
  }

  // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
  if (this->has_nav_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, *this->nav_map_, output);
  }

  // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
  if (this->has_slam_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, *this->slam_map_, output);
  }

  // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
  if (this->has_probability_map()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, *this->probability_map_, output);
  }

  // string slam_map_filename = 5;
  if (this->slam_map_filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slam_map_filename().data(), static_cast<int>(this->slam_map_filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PNavData.slam_map_filename");
    ::google::protobuf::internal::WireFormatLite::WriteStringMaybeAliased(
      5, this->slam_map_filename(), output);
  }

  // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
  if (!this->rooms_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ZimaProto.NavData.PNavData.RoomsInfoEntry.key");
      }
    };

    if (output->IsSerializationDeterministic() &&
        this->rooms_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rooms_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::const_iterator
          it = this->rooms_info().begin();
          it != this->rooms_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PNavData_RoomsInfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rooms_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PNavData_RoomsInfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::const_iterator
          it = this->rooms_info().begin();
          it != this->rooms_info().end(); ++it) {
        entry.reset(rooms_info_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            6, *entry, output);
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
  if (!this->virtual_walls().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->virtual_walls().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->virtual_walls().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::const_iterator
          it = this->virtual_walls().begin();
          it != this->virtual_walls().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PNavData_VirtualWallsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(virtual_walls_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PNavData_VirtualWallsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::const_iterator
          it = this->virtual_walls().begin();
          it != this->virtual_walls().end(); ++it) {
        entry.reset(virtual_walls_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            7, *entry, output);
      }
    }
  }

  // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
  if (!this->block_areas().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (output->IsSerializationDeterministic() &&
        this->block_areas().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->block_areas().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::const_iterator
          it = this->block_areas().begin();
          it != this->block_areas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PNavData_BlockAreasEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(block_areas_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    } else {
      ::google::protobuf::scoped_ptr<PNavData_BlockAreasEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::const_iterator
          it = this->block_areas().begin();
          it != this->block_areas().end(); ++it) {
        entry.reset(block_areas_.NewEntryWrapper(
            it->first, it->second));
        ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
            8, *entry, output);
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), output);
  }
  // @@protoc_insertion_point(serialize_end:ZimaProto.NavData.PNavData)
}

::google::protobuf::uint8* PNavData::InternalSerializeWithCachedSizesToArray(
    bool deterministic, ::google::protobuf::uint8* target) const {
  (void)deterministic; // Unused
  // @@protoc_insertion_point(serialize_to_array_start:ZimaProto.NavData.PNavData)
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // uint32 index = 1;
  if (this->index() != 0) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->index(), target);
  }

  // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
  if (this->has_nav_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        2, *this->nav_map_, deterministic, target);
  }

  // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
  if (this->has_slam_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        3, *this->slam_map_, deterministic, target);
  }

  // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
  if (this->has_probability_map()) {
    target = ::google::protobuf::internal::WireFormatLite::
      InternalWriteMessageNoVirtualToArray(
        4, *this->probability_map_, deterministic, target);
  }

  // string slam_map_filename = 5;
  if (this->slam_map_filename().size() > 0) {
    ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
      this->slam_map_filename().data(), static_cast<int>(this->slam_map_filename().length()),
      ::google::protobuf::internal::WireFormatLite::SERIALIZE,
      "ZimaProto.NavData.PNavData.slam_map_filename");
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->slam_map_filename(), target);
  }

  // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
  if (!this->rooms_info().empty()) {
    typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::const_pointer
        ConstPtr;
    typedef ConstPtr SortItem;
    typedef ::google::protobuf::internal::CompareByDerefFirst<SortItem> Less;
    struct Utf8Check {
      static void Check(ConstPtr p) {
        ::google::protobuf::internal::WireFormatLite::VerifyUtf8String(
          p->first.data(), static_cast<int>(p->first.length()),
          ::google::protobuf::internal::WireFormatLite::SERIALIZE,
          "ZimaProto.NavData.PNavData.RoomsInfoEntry.key");
      }
    };

    if (deterministic &&
        this->rooms_info().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->rooms_info().size()]);
      typedef ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::const_iterator
          it = this->rooms_info().begin();
          it != this->rooms_info().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PNavData_RoomsInfoEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(rooms_info_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)]->first, items[static_cast<ptrdiff_t>(i)]->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(items[static_cast<ptrdiff_t>(i)]);
      }
    } else {
      ::google::protobuf::scoped_ptr<PNavData_RoomsInfoEntry> entry;
      for (::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::const_iterator
          it = this->rooms_info().begin();
          it != this->rooms_info().end(); ++it) {
        entry.reset(rooms_info_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       6, *entry, deterministic, target);
;
        Utf8Check::Check(&*it);
      }
    }
  }

  // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
  if (!this->virtual_walls().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->virtual_walls().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->virtual_walls().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::const_iterator
          it = this->virtual_walls().begin();
          it != this->virtual_walls().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PNavData_VirtualWallsEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(virtual_walls_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PNavData_VirtualWallsEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::const_iterator
          it = this->virtual_walls().begin();
          it != this->virtual_walls().end(); ++it) {
        entry.reset(virtual_walls_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       7, *entry, deterministic, target);
;
      }
    }
  }

  // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
  if (!this->block_areas().empty()) {
    typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::const_pointer
        ConstPtr;
    typedef ::google::protobuf::internal::SortItem< ::google::protobuf::uint32, ConstPtr > SortItem;
    typedef ::google::protobuf::internal::CompareByFirstField<SortItem> Less;

    if (deterministic &&
        this->block_areas().size() > 1) {
      ::google::protobuf::scoped_array<SortItem> items(
          new SortItem[this->block_areas().size()]);
      typedef ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::size_type size_type;
      size_type n = 0;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::const_iterator
          it = this->block_areas().begin();
          it != this->block_areas().end(); ++it, ++n) {
        items[static_cast<ptrdiff_t>(n)] = SortItem(&*it);
      }
      ::std::sort(&items[0], &items[static_cast<ptrdiff_t>(n)], Less());
      ::google::protobuf::scoped_ptr<PNavData_BlockAreasEntry> entry;
      for (size_type i = 0; i < n; i++) {
        entry.reset(block_areas_.NewEntryWrapper(
            items[static_cast<ptrdiff_t>(i)].second->first, items[static_cast<ptrdiff_t>(i)].second->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    } else {
      ::google::protobuf::scoped_ptr<PNavData_BlockAreasEntry> entry;
      for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::const_iterator
          it = this->block_areas().begin();
          it != this->block_areas().end(); ++it) {
        entry.reset(block_areas_.NewEntryWrapper(
            it->first, it->second));
        target = ::google::protobuf::internal::WireFormatLite::
                   InternalWriteMessageNoVirtualToArray(
                       8, *entry, deterministic, target);
;
      }
    }
  }

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()), target);
  }
  // @@protoc_insertion_point(serialize_to_array_end:ZimaProto.NavData.PNavData)
  return target;
}

size_t PNavData::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:ZimaProto.NavData.PNavData)
  size_t total_size = 0;

  if ((_internal_metadata_.have_unknown_fields() &&  ::google::protobuf::internal::GetProto3PreserveUnknownsDefault())) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        (::google::protobuf::internal::GetProto3PreserveUnknownsDefault()   ? _internal_metadata_.unknown_fields()   : _internal_metadata_.default_instance()));
  }
  // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->rooms_info_size());
  {
    ::google::protobuf::scoped_ptr<PNavData_RoomsInfoEntry> entry;
    for (::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >::const_iterator
        it = this->rooms_info().begin();
        it != this->rooms_info().end(); ++it) {
      entry.reset(rooms_info_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->virtual_walls_size());
  {
    ::google::protobuf::scoped_ptr<PNavData_VirtualWallsEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >::const_iterator
        it = this->virtual_walls().begin();
        it != this->virtual_walls().end(); ++it) {
      entry.reset(virtual_walls_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
  total_size += 1 *
      ::google::protobuf::internal::FromIntSize(this->block_areas_size());
  {
    ::google::protobuf::scoped_ptr<PNavData_BlockAreasEntry> entry;
    for (::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >::const_iterator
        it = this->block_areas().begin();
        it != this->block_areas().end(); ++it) {
      entry.reset(block_areas_.NewEntryWrapper(it->first, it->second));
      total_size += ::google::protobuf::internal::WireFormatLite::
          MessageSizeNoVirtual(*entry);
    }
  }

  // string slam_map_filename = 5;
  if (this->slam_map_filename().size() > 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::StringSize(
        this->slam_map_filename());
  }

  // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
  if (this->has_nav_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->nav_map_);
  }

  // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
  if (this->has_slam_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->slam_map_);
  }

  // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
  if (this->has_probability_map()) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        *this->probability_map_);
  }

  // uint32 index = 1;
  if (this->index() != 0) {
    total_size += 1 +
      ::google::protobuf::internal::WireFormatLite::UInt32Size(
        this->index());
  }

  int cached_size = ::google::protobuf::internal::ToCachedSize(total_size);
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = cached_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PNavData::MergeFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:ZimaProto.NavData.PNavData)
  GOOGLE_DCHECK_NE(&from, this);
  const PNavData* source =
      ::google::protobuf::internal::DynamicCastToGenerated<const PNavData>(
          &from);
  if (source == NULL) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:ZimaProto.NavData.PNavData)
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:ZimaProto.NavData.PNavData)
    MergeFrom(*source);
  }
}

void PNavData::MergeFrom(const PNavData& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:ZimaProto.NavData.PNavData)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom(from._internal_metadata_);
  ::google::protobuf::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  rooms_info_.MergeFrom(from.rooms_info_);
  virtual_walls_.MergeFrom(from.virtual_walls_);
  block_areas_.MergeFrom(from.block_areas_);
  if (from.slam_map_filename().size() > 0) {

    slam_map_filename_.AssignWithDefault(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), from.slam_map_filename_);
  }
  if (from.has_nav_map()) {
    mutable_nav_map()->::ZimaProto::Map::PMultiLayerCharGridMap2D::MergeFrom(from.nav_map());
  }
  if (from.has_slam_map()) {
    mutable_slam_map()->::ZimaProto::Map::PSlamValueGridMap2D::MergeFrom(from.slam_map());
  }
  if (from.has_probability_map()) {
    mutable_probability_map()->::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D::MergeFrom(from.probability_map());
  }
  if (from.index() != 0) {
    set_index(from.index());
  }
}

void PNavData::CopyFrom(const ::google::protobuf::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:ZimaProto.NavData.PNavData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PNavData::CopyFrom(const PNavData& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:ZimaProto.NavData.PNavData)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PNavData::IsInitialized() const {
  return true;
}

void PNavData::Swap(PNavData* other) {
  if (other == this) return;
  InternalSwap(other);
}
void PNavData::InternalSwap(PNavData* other) {
  using std::swap;
  rooms_info_.Swap(&other->rooms_info_);
  virtual_walls_.Swap(&other->virtual_walls_);
  block_areas_.Swap(&other->block_areas_);
  slam_map_filename_.Swap(&other->slam_map_filename_);
  swap(nav_map_, other->nav_map_);
  swap(slam_map_, other->slam_map_);
  swap(probability_map_, other->probability_map_);
  swap(index_, other->index_);
  _internal_metadata_.Swap(&other->_internal_metadata_);
  swap(_cached_size_, other->_cached_size_);
}

::google::protobuf::Metadata PNavData::GetMetadata() const {
  protobuf_zima_2fproto_2fnav_5fdata_2eproto::protobuf_AssignDescriptorsOnce();
  return protobuf_zima_2fproto_2fnav_5fdata_2eproto::file_level_metadata[kIndexInFileMessages];
}

#if PROTOBUF_INLINE_NOT_IN_HEADERS
// PNavData

// uint32 index = 1;
void PNavData::clear_index() {
  index_ = 0u;
}
::google::protobuf::uint32 PNavData::index() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.index)
  return index_;
}
void PNavData::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PNavData.index)
}

// .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
bool PNavData::has_nav_map() const {
  return this != internal_default_instance() && nav_map_ != NULL;
}
void PNavData::clear_nav_map() {
  if (GetArenaNoVirtual() == NULL && nav_map_ != NULL) delete nav_map_;
  nav_map_ = NULL;
}
const ::ZimaProto::Map::PMultiLayerCharGridMap2D& PNavData::nav_map() const {
  const ::ZimaProto::Map::PMultiLayerCharGridMap2D* p = nav_map_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.nav_map)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMultiLayerCharGridMap2D*>(
      &::ZimaProto::Map::_PMultiLayerCharGridMap2D_default_instance_);
}
::ZimaProto::Map::PMultiLayerCharGridMap2D* PNavData::mutable_nav_map() {
  
  if (nav_map_ == NULL) {
    nav_map_ = new ::ZimaProto::Map::PMultiLayerCharGridMap2D;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.nav_map)
  return nav_map_;
}
::ZimaProto::Map::PMultiLayerCharGridMap2D* PNavData::release_nav_map() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.nav_map)
  
  ::ZimaProto::Map::PMultiLayerCharGridMap2D* temp = nav_map_;
  nav_map_ = NULL;
  return temp;
}
void PNavData::set_allocated_nav_map(::ZimaProto::Map::PMultiLayerCharGridMap2D* nav_map) {
  delete nav_map_;
  nav_map_ = nav_map;
  if (nav_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.nav_map)
}

// .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
bool PNavData::has_slam_map() const {
  return this != internal_default_instance() && slam_map_ != NULL;
}
void PNavData::clear_slam_map() {
  if (GetArenaNoVirtual() == NULL && slam_map_ != NULL) delete slam_map_;
  slam_map_ = NULL;
}
const ::ZimaProto::Map::PSlamValueGridMap2D& PNavData::slam_map() const {
  const ::ZimaProto::Map::PSlamValueGridMap2D* p = slam_map_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.slam_map)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PSlamValueGridMap2D*>(
      &::ZimaProto::Map::_PSlamValueGridMap2D_default_instance_);
}
::ZimaProto::Map::PSlamValueGridMap2D* PNavData::mutable_slam_map() {
  
  if (slam_map_ == NULL) {
    slam_map_ = new ::ZimaProto::Map::PSlamValueGridMap2D;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.slam_map)
  return slam_map_;
}
::ZimaProto::Map::PSlamValueGridMap2D* PNavData::release_slam_map() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.slam_map)
  
  ::ZimaProto::Map::PSlamValueGridMap2D* temp = slam_map_;
  slam_map_ = NULL;
  return temp;
}
void PNavData::set_allocated_slam_map(::ZimaProto::Map::PSlamValueGridMap2D* slam_map) {
  delete slam_map_;
  slam_map_ = slam_map;
  if (slam_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.slam_map)
}

// .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
bool PNavData::has_probability_map() const {
  return this != internal_default_instance() && probability_map_ != NULL;
}
void PNavData::clear_probability_map() {
  if (GetArenaNoVirtual() == NULL && probability_map_ != NULL) delete probability_map_;
  probability_map_ = NULL;
}
const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D& PNavData::probability_map() const {
  const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* p = probability_map_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.probability_map)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D*>(
      &::ZimaProto::ProbabilityMap::_PProbabilityIndexGridMap2D_default_instance_);
}
::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* PNavData::mutable_probability_map() {
  
  if (probability_map_ == NULL) {
    probability_map_ = new ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.probability_map)
  return probability_map_;
}
::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* PNavData::release_probability_map() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.probability_map)
  
  ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* temp = probability_map_;
  probability_map_ = NULL;
  return temp;
}
void PNavData::set_allocated_probability_map(::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* probability_map) {
  delete probability_map_;
  probability_map_ = probability_map;
  if (probability_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.probability_map)
}

// string slam_map_filename = 5;
void PNavData::clear_slam_map_filename() {
  slam_map_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
const ::std::string& PNavData::slam_map_filename() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.slam_map_filename)
  return slam_map_filename_.GetNoArena();
}
void PNavData::set_slam_map_filename(const ::std::string& value) {
  
  slam_map_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PNavData.slam_map_filename)
}
#if LANG_CXX11
void PNavData::set_slam_map_filename(::std::string&& value) {
  
  slam_map_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PNavData.slam_map_filename)
}
#endif
void PNavData::set_slam_map_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slam_map_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PNavData.slam_map_filename)
}
void PNavData::set_slam_map_filename(const char* value, size_t size) {
  
  slam_map_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PNavData.slam_map_filename)
}
::std::string* PNavData::mutable_slam_map_filename() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.slam_map_filename)
  return slam_map_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
::std::string* PNavData::release_slam_map_filename() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.slam_map_filename)
  
  return slam_map_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
void PNavData::set_allocated_slam_map_filename(::std::string* slam_map_filename) {
  if (slam_map_filename != NULL) {
    
  } else {
    
  }
  slam_map_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slam_map_filename);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.slam_map_filename)
}

// map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
int PNavData::rooms_info_size() const {
  return rooms_info_.size();
}
void PNavData::clear_rooms_info() {
  rooms_info_.Clear();
}
 const ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >&
PNavData::rooms_info() const {
  // @@protoc_insertion_point(field_map:ZimaProto.NavData.PNavData.rooms_info)
  return rooms_info_.GetMap();
}
 ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >*
PNavData::mutable_rooms_info() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.NavData.PNavData.rooms_info)
  return rooms_info_.MutableMap();
}

// map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
int PNavData::virtual_walls_size() const {
  return virtual_walls_.size();
}
void PNavData::clear_virtual_walls() {
  virtual_walls_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >&
PNavData::virtual_walls() const {
  // @@protoc_insertion_point(field_map:ZimaProto.NavData.PNavData.virtual_walls)
  return virtual_walls_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >*
PNavData::mutable_virtual_walls() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.NavData.PNavData.virtual_walls)
  return virtual_walls_.MutableMap();
}

// map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
int PNavData::block_areas_size() const {
  return block_areas_.size();
}
void PNavData::clear_block_areas() {
  block_areas_.Clear();
}
 const ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >&
PNavData::block_areas() const {
  // @@protoc_insertion_point(field_map:ZimaProto.NavData.PNavData.block_areas)
  return block_areas_.GetMap();
}
 ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >*
PNavData::mutable_block_areas() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.NavData.PNavData.block_areas)
  return block_areas_.MutableMap();
}

#endif  // PROTOBUF_INLINE_NOT_IN_HEADERS

// @@protoc_insertion_point(namespace_scope)

}  // namespace NavData
}  // namespace ZimaProto

// @@protoc_insertion_point(global_scope)
