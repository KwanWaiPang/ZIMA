// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: zima/proto/nav_data.proto

#ifndef PROTOBUF_zima_2fproto_2fnav_5fdata_2eproto__INCLUDED
#define PROTOBUF_zima_2fproto_2fnav_5fdata_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3004000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3004000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/map.h>  // IWYU pragma: export
#include <google/protobuf/map_entry.h>
#include <google/protobuf/map_field_inl.h>
#include <google/protobuf/generated_enum_reflection.h>
#include <google/protobuf/unknown_field_set.h>
#include "zima/proto/map.pb.h"
#include "zima/proto/probability_map.pb.h"
// @@protoc_insertion_point(includes)
namespace ZimaProto {
namespace NavData {
class PBlockArea;
class PBlockAreaDefaultTypeInternal;
extern PBlockAreaDefaultTypeInternal _PBlockArea_default_instance_;
class PNavData;
class PNavDataDefaultTypeInternal;
extern PNavDataDefaultTypeInternal _PNavData_default_instance_;
class PNavData_BlockAreasEntry;
class PNavData_BlockAreasEntryDefaultTypeInternal;
extern PNavData_BlockAreasEntryDefaultTypeInternal _PNavData_BlockAreasEntry_default_instance_;
class PNavData_RoomsInfoEntry;
class PNavData_RoomsInfoEntryDefaultTypeInternal;
extern PNavData_RoomsInfoEntryDefaultTypeInternal _PNavData_RoomsInfoEntry_default_instance_;
class PNavData_VirtualWallsEntry;
class PNavData_VirtualWallsEntryDefaultTypeInternal;
extern PNavData_VirtualWallsEntryDefaultTypeInternal _PNavData_VirtualWallsEntry_default_instance_;
class PRoomInfo;
class PRoomInfoDefaultTypeInternal;
extern PRoomInfoDefaultTypeInternal _PRoomInfo_default_instance_;
class PVirtualWall;
class PVirtualWallDefaultTypeInternal;
extern PVirtualWallDefaultTypeInternal _PVirtualWall_default_instance_;
}  // namespace NavData
}  // namespace ZimaProto

namespace ZimaProto {
namespace NavData {

namespace protobuf_zima_2fproto_2fnav_5fdata_2eproto {
// Internal implementation detail -- do not call these.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[];
  static const ::google::protobuf::uint32 offsets[];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static void InitDefaultsImpl();
};
void AddDescriptors();
void InitDefaults();
}  // namespace protobuf_zima_2fproto_2fnav_5fdata_2eproto

enum PUserBlockType {
  kStrictBlock = 0,
  kAvoidWaterBlock = 1,
  kCarpetBlock = 2,
  PUserBlockType_INT_MIN_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32min,
  PUserBlockType_INT_MAX_SENTINEL_DO_NOT_USE_ = ::google::protobuf::kint32max
};
bool PUserBlockType_IsValid(int value);
const PUserBlockType PUserBlockType_MIN = kStrictBlock;
const PUserBlockType PUserBlockType_MAX = kCarpetBlock;
const int PUserBlockType_ARRAYSIZE = PUserBlockType_MAX + 1;

const ::google::protobuf::EnumDescriptor* PUserBlockType_descriptor();
inline const ::std::string& PUserBlockType_Name(PUserBlockType value) {
  return ::google::protobuf::internal::NameOfEnum(
    PUserBlockType_descriptor(), value);
}
inline bool PUserBlockType_Parse(
    const ::std::string& name, PUserBlockType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<PUserBlockType>(
    PUserBlockType_descriptor(), name, value);
}
// ===================================================================

class PRoomInfo : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.NavData.PRoomInfo) */ {
 public:
  PRoomInfo();
  virtual ~PRoomInfo();

  PRoomInfo(const PRoomInfo& from);

  inline PRoomInfo& operator=(const PRoomInfo& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PRoomInfo(PRoomInfo&& from) noexcept
    : PRoomInfo() {
    *this = ::std::move(from);
  }

  inline PRoomInfo& operator=(PRoomInfo&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PRoomInfo& default_instance();

  static inline const PRoomInfo* internal_default_instance() {
    return reinterpret_cast<const PRoomInfo*>(
               &_PRoomInfo_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    0;

  void Swap(PRoomInfo* other);
  friend void swap(PRoomInfo& a, PRoomInfo& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PRoomInfo* New() const PROTOBUF_FINAL { return New(NULL); }

  PRoomInfo* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PRoomInfo& from);
  void MergeFrom(const PRoomInfo& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PRoomInfo* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // string room_index = 1;
  void clear_room_index();
  static const int kRoomIndexFieldNumber = 1;
  const ::std::string& room_index() const;
  void set_room_index(const ::std::string& value);
  #if LANG_CXX11
  void set_room_index(::std::string&& value);
  #endif
  void set_room_index(const char* value);
  void set_room_index(const char* value, size_t size);
  ::std::string* mutable_room_index();
  ::std::string* release_room_index();
  void set_allocated_room_index(::std::string* room_index);

  // .ZimaProto.Map.PMapCellBound room_bound = 2;
  bool has_room_bound() const;
  void clear_room_bound();
  static const int kRoomBoundFieldNumber = 2;
  const ::ZimaProto::Map::PMapCellBound& room_bound() const;
  ::ZimaProto::Map::PMapCellBound* mutable_room_bound();
  ::ZimaProto::Map::PMapCellBound* release_room_bound();
  void set_allocated_room_bound(::ZimaProto::Map::PMapCellBound* room_bound);

  // .ZimaProto.Map.PMapCell section_base_cell = 3;
  bool has_section_base_cell() const;
  void clear_section_base_cell();
  static const int kSectionBaseCellFieldNumber = 3;
  const ::ZimaProto::Map::PMapCell& section_base_cell() const;
  ::ZimaProto::Map::PMapCell* mutable_section_base_cell();
  ::ZimaProto::Map::PMapCell* release_section_base_cell();
  void set_allocated_section_base_cell(::ZimaProto::Map::PMapCell* section_base_cell);

  // uint32 section_x_range = 4;
  void clear_section_x_range();
  static const int kSectionXRangeFieldNumber = 4;
  ::google::protobuf::uint32 section_x_range() const;
  void set_section_x_range(::google::protobuf::uint32 value);

  // uint32 section_y_range = 5;
  void clear_section_y_range();
  static const int kSectionYRangeFieldNumber = 5;
  ::google::protobuf::uint32 section_y_range() const;
  void set_section_y_range(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ZimaProto.NavData.PRoomInfo)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr room_index_;
  ::ZimaProto::Map::PMapCellBound* room_bound_;
  ::ZimaProto::Map::PMapCell* section_base_cell_;
  ::google::protobuf::uint32 section_x_range_;
  ::google::protobuf::uint32 section_y_range_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fnav_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PVirtualWall : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.NavData.PVirtualWall) */ {
 public:
  PVirtualWall();
  virtual ~PVirtualWall();

  PVirtualWall(const PVirtualWall& from);

  inline PVirtualWall& operator=(const PVirtualWall& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PVirtualWall(PVirtualWall&& from) noexcept
    : PVirtualWall() {
    *this = ::std::move(from);
  }

  inline PVirtualWall& operator=(PVirtualWall&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PVirtualWall& default_instance();

  static inline const PVirtualWall* internal_default_instance() {
    return reinterpret_cast<const PVirtualWall*>(
               &_PVirtualWall_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    1;

  void Swap(PVirtualWall* other);
  friend void swap(PVirtualWall& a, PVirtualWall& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PVirtualWall* New() const PROTOBUF_FINAL { return New(NULL); }

  PVirtualWall* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PVirtualWall& from);
  void MergeFrom(const PVirtualWall& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PVirtualWall* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 5;
  const ::ZimaProto::Map::PMapPoint& points(int index) const;
  ::ZimaProto::Map::PMapPoint* mutable_points(int index);
  ::ZimaProto::Map::PMapPoint* add_points();
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >&
      points() const;

  // string map_value = 4;
  void clear_map_value();
  static const int kMapValueFieldNumber = 4;
  const ::std::string& map_value() const;
  void set_map_value(const ::std::string& value);
  #if LANG_CXX11
  void set_map_value(::std::string&& value);
  #endif
  void set_map_value(const char* value);
  void set_map_value(const char* value, size_t size);
  ::std::string* mutable_map_value();
  ::std::string* release_map_value();
  void set_allocated_map_value(::std::string* map_value);

  // bool valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // bool enable = 2;
  void clear_enable();
  static const int kEnableFieldNumber = 2;
  bool enable() const;
  void set_enable(bool value);

  // .ZimaProto.NavData.PUserBlockType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ZimaProto::NavData::PUserBlockType type() const;
  void set_type(::ZimaProto::NavData::PUserBlockType value);

  // @@protoc_insertion_point(class_scope:ZimaProto.NavData.PVirtualWall)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint > points_;
  ::google::protobuf::internal::ArenaStringPtr map_value_;
  bool valid_;
  bool enable_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fnav_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------

class PBlockArea : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.NavData.PBlockArea) */ {
 public:
  PBlockArea();
  virtual ~PBlockArea();

  PBlockArea(const PBlockArea& from);

  inline PBlockArea& operator=(const PBlockArea& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PBlockArea(PBlockArea&& from) noexcept
    : PBlockArea() {
    *this = ::std::move(from);
  }

  inline PBlockArea& operator=(PBlockArea&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PBlockArea& default_instance();

  static inline const PBlockArea* internal_default_instance() {
    return reinterpret_cast<const PBlockArea*>(
               &_PBlockArea_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    2;

  void Swap(PBlockArea* other);
  friend void swap(PBlockArea& a, PBlockArea& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PBlockArea* New() const PROTOBUF_FINAL { return New(NULL); }

  PBlockArea* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PBlockArea& from);
  void MergeFrom(const PBlockArea& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PBlockArea* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ZimaProto.Map.PMapPoint points = 5;
  int points_size() const;
  void clear_points();
  static const int kPointsFieldNumber = 5;
  const ::ZimaProto::Map::PMapPoint& points(int index) const;
  ::ZimaProto::Map::PMapPoint* mutable_points(int index);
  ::ZimaProto::Map::PMapPoint* add_points();
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >*
      mutable_points();
  const ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >&
      points() const;

  // string map_value = 4;
  void clear_map_value();
  static const int kMapValueFieldNumber = 4;
  const ::std::string& map_value() const;
  void set_map_value(const ::std::string& value);
  #if LANG_CXX11
  void set_map_value(::std::string&& value);
  #endif
  void set_map_value(const char* value);
  void set_map_value(const char* value, size_t size);
  ::std::string* mutable_map_value();
  ::std::string* release_map_value();
  void set_allocated_map_value(::std::string* map_value);

  // bool valid = 1;
  void clear_valid();
  static const int kValidFieldNumber = 1;
  bool valid() const;
  void set_valid(bool value);

  // bool enable = 2;
  void clear_enable();
  static const int kEnableFieldNumber = 2;
  bool enable() const;
  void set_enable(bool value);

  // .ZimaProto.NavData.PUserBlockType type = 3;
  void clear_type();
  static const int kTypeFieldNumber = 3;
  ::ZimaProto::NavData::PUserBlockType type() const;
  void set_type(::ZimaProto::NavData::PUserBlockType value);

  // @@protoc_insertion_point(class_scope:ZimaProto.NavData.PBlockArea)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint > points_;
  ::google::protobuf::internal::ArenaStringPtr map_value_;
  bool valid_;
  bool enable_;
  int type_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fnav_5fdata_2eproto::TableStruct;
};
// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------


// -------------------------------------------------------------------

class PNavData : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ZimaProto.NavData.PNavData) */ {
 public:
  PNavData();
  virtual ~PNavData();

  PNavData(const PNavData& from);

  inline PNavData& operator=(const PNavData& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  PNavData(PNavData&& from) noexcept
    : PNavData() {
    *this = ::std::move(from);
  }

  inline PNavData& operator=(PNavData&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const PNavData& default_instance();

  static inline const PNavData* internal_default_instance() {
    return reinterpret_cast<const PNavData*>(
               &_PNavData_default_instance_);
  }
  static PROTOBUF_CONSTEXPR int const kIndexInFileMessages =
    6;

  void Swap(PNavData* other);
  friend void swap(PNavData& a, PNavData& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline PNavData* New() const PROTOBUF_FINAL { return New(NULL); }

  PNavData* New(::google::protobuf::Arena* arena) const PROTOBUF_FINAL;
  void CopyFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void MergeFrom(const ::google::protobuf::Message& from) PROTOBUF_FINAL;
  void CopyFrom(const PNavData& from);
  void MergeFrom(const PNavData& from);
  void Clear() PROTOBUF_FINAL;
  bool IsInitialized() const PROTOBUF_FINAL;

  size_t ByteSizeLong() const PROTOBUF_FINAL;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) PROTOBUF_FINAL;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const PROTOBUF_FINAL;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const PROTOBUF_FINAL;
  int GetCachedSize() const PROTOBUF_FINAL { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const PROTOBUF_FINAL;
  void InternalSwap(PNavData* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const PROTOBUF_FINAL;

  // nested types ----------------------------------------------------


  // accessors -------------------------------------------------------

  // map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
  int rooms_info_size() const;
  void clear_rooms_info();
  static const int kRoomsInfoFieldNumber = 6;
  const ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >&
      rooms_info() const;
  ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >*
      mutable_rooms_info();

  // map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
  int virtual_walls_size() const;
  void clear_virtual_walls();
  static const int kVirtualWallsFieldNumber = 7;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >&
      virtual_walls() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >*
      mutable_virtual_walls();

  // map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
  int block_areas_size() const;
  void clear_block_areas();
  static const int kBlockAreasFieldNumber = 8;
  const ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >&
      block_areas() const;
  ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >*
      mutable_block_areas();

  // string slam_map_filename = 5;
  void clear_slam_map_filename();
  static const int kSlamMapFilenameFieldNumber = 5;
  const ::std::string& slam_map_filename() const;
  void set_slam_map_filename(const ::std::string& value);
  #if LANG_CXX11
  void set_slam_map_filename(::std::string&& value);
  #endif
  void set_slam_map_filename(const char* value);
  void set_slam_map_filename(const char* value, size_t size);
  ::std::string* mutable_slam_map_filename();
  ::std::string* release_slam_map_filename();
  void set_allocated_slam_map_filename(::std::string* slam_map_filename);

  // .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
  bool has_nav_map() const;
  void clear_nav_map();
  static const int kNavMapFieldNumber = 2;
  const ::ZimaProto::Map::PMultiLayerCharGridMap2D& nav_map() const;
  ::ZimaProto::Map::PMultiLayerCharGridMap2D* mutable_nav_map();
  ::ZimaProto::Map::PMultiLayerCharGridMap2D* release_nav_map();
  void set_allocated_nav_map(::ZimaProto::Map::PMultiLayerCharGridMap2D* nav_map);

  // .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
  bool has_slam_map() const;
  void clear_slam_map();
  static const int kSlamMapFieldNumber = 3;
  const ::ZimaProto::Map::PSlamValueGridMap2D& slam_map() const;
  ::ZimaProto::Map::PSlamValueGridMap2D* mutable_slam_map();
  ::ZimaProto::Map::PSlamValueGridMap2D* release_slam_map();
  void set_allocated_slam_map(::ZimaProto::Map::PSlamValueGridMap2D* slam_map);

  // .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
  bool has_probability_map() const;
  void clear_probability_map();
  static const int kProbabilityMapFieldNumber = 4;
  const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D& probability_map() const;
  ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* mutable_probability_map();
  ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* release_probability_map();
  void set_allocated_probability_map(::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* probability_map);

  // uint32 index = 1;
  void clear_index();
  static const int kIndexFieldNumber = 1;
  ::google::protobuf::uint32 index() const;
  void set_index(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:ZimaProto.NavData.PNavData)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  public:
  class PNavData_RoomsInfoEntry : public ::google::protobuf::internal::MapEntry<PNavData_RoomsInfoEntry, 
      ::std::string, ::ZimaProto::NavData::PRoomInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<PNavData_RoomsInfoEntry, 
      ::std::string, ::ZimaProto::NavData::PRoomInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    PNavData_RoomsInfoEntry();
    PNavData_RoomsInfoEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const PNavData_RoomsInfoEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_PNavData_RoomsInfoEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      PNavData_RoomsInfoEntry,
      ::std::string, ::ZimaProto::NavData::PRoomInfo,
      ::google::protobuf::internal::WireFormatLite::TYPE_STRING,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > rooms_info_;
  private:
  public:
  class PNavData_VirtualWallsEntry : public ::google::protobuf::internal::MapEntry<PNavData_VirtualWallsEntry, 
      ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<PNavData_VirtualWallsEntry, 
      ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    PNavData_VirtualWallsEntry();
    PNavData_VirtualWallsEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const PNavData_VirtualWallsEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_PNavData_VirtualWallsEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      PNavData_VirtualWallsEntry,
      ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > virtual_walls_;
  private:
  public:
  class PNavData_BlockAreasEntry : public ::google::protobuf::internal::MapEntry<PNavData_BlockAreasEntry, 
      ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > {
  public:
    typedef ::google::protobuf::internal::MapEntry<PNavData_BlockAreasEntry, 
      ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > SuperType;
    PNavData_BlockAreasEntry();
    PNavData_BlockAreasEntry(::google::protobuf::Arena* arena);
    void MergeFrom(const ::google::protobuf::Message& other) PROTOBUF_FINAL;
    void MergeFrom(const PNavData_BlockAreasEntry& other);
    static const Message* internal_default_instance() { return reinterpret_cast<const Message*>(&_PNavData_BlockAreasEntry_default_instance_); }
    ::google::protobuf::Metadata GetMetadata() const;
  };
  private:
  ::google::protobuf::internal::MapField<
      PNavData_BlockAreasEntry,
      ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea,
      ::google::protobuf::internal::WireFormatLite::TYPE_UINT32,
      ::google::protobuf::internal::WireFormatLite::TYPE_MESSAGE,
      0 > block_areas_;
  private:
  ::google::protobuf::internal::ArenaStringPtr slam_map_filename_;
  ::ZimaProto::Map::PMultiLayerCharGridMap2D* nav_map_;
  ::ZimaProto::Map::PSlamValueGridMap2D* slam_map_;
  ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* probability_map_;
  ::google::protobuf::uint32 index_;
  mutable int _cached_size_;
  friend struct protobuf_zima_2fproto_2fnav_5fdata_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#if !PROTOBUF_INLINE_NOT_IN_HEADERS
#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// PRoomInfo

// string room_index = 1;
inline void PRoomInfo::clear_room_index() {
  room_index_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PRoomInfo::room_index() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.room_index)
  return room_index_.GetNoArena();
}
inline void PRoomInfo::set_room_index(const ::std::string& value) {
  
  room_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PRoomInfo.room_index)
}
#if LANG_CXX11
inline void PRoomInfo::set_room_index(::std::string&& value) {
  
  room_index_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PRoomInfo.room_index)
}
#endif
inline void PRoomInfo::set_room_index(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  room_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PRoomInfo.room_index)
}
inline void PRoomInfo::set_room_index(const char* value, size_t size) {
  
  room_index_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PRoomInfo.room_index)
}
inline ::std::string* PRoomInfo::mutable_room_index() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PRoomInfo.room_index)
  return room_index_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PRoomInfo::release_room_index() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PRoomInfo.room_index)
  
  return room_index_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PRoomInfo::set_allocated_room_index(::std::string* room_index) {
  if (room_index != NULL) {
    
  } else {
    
  }
  room_index_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), room_index);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PRoomInfo.room_index)
}

// .ZimaProto.Map.PMapCellBound room_bound = 2;
inline bool PRoomInfo::has_room_bound() const {
  return this != internal_default_instance() && room_bound_ != NULL;
}
inline void PRoomInfo::clear_room_bound() {
  if (GetArenaNoVirtual() == NULL && room_bound_ != NULL) delete room_bound_;
  room_bound_ = NULL;
}
inline const ::ZimaProto::Map::PMapCellBound& PRoomInfo::room_bound() const {
  const ::ZimaProto::Map::PMapCellBound* p = room_bound_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.room_bound)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapCellBound*>(
      &::ZimaProto::Map::_PMapCellBound_default_instance_);
}
inline ::ZimaProto::Map::PMapCellBound* PRoomInfo::mutable_room_bound() {
  
  if (room_bound_ == NULL) {
    room_bound_ = new ::ZimaProto::Map::PMapCellBound;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PRoomInfo.room_bound)
  return room_bound_;
}
inline ::ZimaProto::Map::PMapCellBound* PRoomInfo::release_room_bound() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PRoomInfo.room_bound)
  
  ::ZimaProto::Map::PMapCellBound* temp = room_bound_;
  room_bound_ = NULL;
  return temp;
}
inline void PRoomInfo::set_allocated_room_bound(::ZimaProto::Map::PMapCellBound* room_bound) {
  delete room_bound_;
  room_bound_ = room_bound;
  if (room_bound) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PRoomInfo.room_bound)
}

// .ZimaProto.Map.PMapCell section_base_cell = 3;
inline bool PRoomInfo::has_section_base_cell() const {
  return this != internal_default_instance() && section_base_cell_ != NULL;
}
inline void PRoomInfo::clear_section_base_cell() {
  if (GetArenaNoVirtual() == NULL && section_base_cell_ != NULL) delete section_base_cell_;
  section_base_cell_ = NULL;
}
inline const ::ZimaProto::Map::PMapCell& PRoomInfo::section_base_cell() const {
  const ::ZimaProto::Map::PMapCell* p = section_base_cell_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.section_base_cell)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMapCell*>(
      &::ZimaProto::Map::_PMapCell_default_instance_);
}
inline ::ZimaProto::Map::PMapCell* PRoomInfo::mutable_section_base_cell() {
  
  if (section_base_cell_ == NULL) {
    section_base_cell_ = new ::ZimaProto::Map::PMapCell;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PRoomInfo.section_base_cell)
  return section_base_cell_;
}
inline ::ZimaProto::Map::PMapCell* PRoomInfo::release_section_base_cell() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PRoomInfo.section_base_cell)
  
  ::ZimaProto::Map::PMapCell* temp = section_base_cell_;
  section_base_cell_ = NULL;
  return temp;
}
inline void PRoomInfo::set_allocated_section_base_cell(::ZimaProto::Map::PMapCell* section_base_cell) {
  delete section_base_cell_;
  section_base_cell_ = section_base_cell;
  if (section_base_cell) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PRoomInfo.section_base_cell)
}

// uint32 section_x_range = 4;
inline void PRoomInfo::clear_section_x_range() {
  section_x_range_ = 0u;
}
inline ::google::protobuf::uint32 PRoomInfo::section_x_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.section_x_range)
  return section_x_range_;
}
inline void PRoomInfo::set_section_x_range(::google::protobuf::uint32 value) {
  
  section_x_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PRoomInfo.section_x_range)
}

// uint32 section_y_range = 5;
inline void PRoomInfo::clear_section_y_range() {
  section_y_range_ = 0u;
}
inline ::google::protobuf::uint32 PRoomInfo::section_y_range() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PRoomInfo.section_y_range)
  return section_y_range_;
}
inline void PRoomInfo::set_section_y_range(::google::protobuf::uint32 value) {
  
  section_y_range_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PRoomInfo.section_y_range)
}

// -------------------------------------------------------------------

// PVirtualWall

// bool valid = 1;
inline void PVirtualWall::clear_valid() {
  valid_ = false;
}
inline bool PVirtualWall::valid() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.valid)
  return valid_;
}
inline void PVirtualWall::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.valid)
}

// bool enable = 2;
inline void PVirtualWall::clear_enable() {
  enable_ = false;
}
inline bool PVirtualWall::enable() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.enable)
  return enable_;
}
inline void PVirtualWall::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.enable)
}

// .ZimaProto.NavData.PUserBlockType type = 3;
inline void PVirtualWall::clear_type() {
  type_ = 0;
}
inline ::ZimaProto::NavData::PUserBlockType PVirtualWall::type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.type)
  return static_cast< ::ZimaProto::NavData::PUserBlockType >(type_);
}
inline void PVirtualWall::set_type(::ZimaProto::NavData::PUserBlockType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.type)
}

// string map_value = 4;
inline void PVirtualWall::clear_map_value() {
  map_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PVirtualWall::map_value() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.map_value)
  return map_value_.GetNoArena();
}
inline void PVirtualWall::set_map_value(const ::std::string& value) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PVirtualWall.map_value)
}
#if LANG_CXX11
inline void PVirtualWall::set_map_value(::std::string&& value) {
  
  map_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PVirtualWall.map_value)
}
#endif
inline void PVirtualWall::set_map_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PVirtualWall.map_value)
}
inline void PVirtualWall::set_map_value(const char* value, size_t size) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PVirtualWall.map_value)
}
inline ::std::string* PVirtualWall::mutable_map_value() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PVirtualWall.map_value)
  return map_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PVirtualWall::release_map_value() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PVirtualWall.map_value)
  
  return map_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PVirtualWall::set_allocated_map_value(::std::string* map_value) {
  if (map_value != NULL) {
    
  } else {
    
  }
  map_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_value);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PVirtualWall.map_value)
}

// repeated .ZimaProto.Map.PMapPoint points = 5;
inline int PVirtualWall::points_size() const {
  return points_.size();
}
inline void PVirtualWall::clear_points() {
  points_.Clear();
}
inline const ::ZimaProto::Map::PMapPoint& PVirtualWall::points(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PVirtualWall.points)
  return points_.Get(index);
}
inline ::ZimaProto::Map::PMapPoint* PVirtualWall::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PVirtualWall.points)
  return points_.Mutable(index);
}
inline ::ZimaProto::Map::PMapPoint* PVirtualWall::add_points() {
  // @@protoc_insertion_point(field_add:ZimaProto.NavData.PVirtualWall.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >*
PVirtualWall::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.NavData.PVirtualWall.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >&
PVirtualWall::points() const {
  // @@protoc_insertion_point(field_list:ZimaProto.NavData.PVirtualWall.points)
  return points_;
}

// -------------------------------------------------------------------

// PBlockArea

// bool valid = 1;
inline void PBlockArea::clear_valid() {
  valid_ = false;
}
inline bool PBlockArea::valid() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.valid)
  return valid_;
}
inline void PBlockArea::set_valid(bool value) {
  
  valid_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.valid)
}

// bool enable = 2;
inline void PBlockArea::clear_enable() {
  enable_ = false;
}
inline bool PBlockArea::enable() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.enable)
  return enable_;
}
inline void PBlockArea::set_enable(bool value) {
  
  enable_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.enable)
}

// .ZimaProto.NavData.PUserBlockType type = 3;
inline void PBlockArea::clear_type() {
  type_ = 0;
}
inline ::ZimaProto::NavData::PUserBlockType PBlockArea::type() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.type)
  return static_cast< ::ZimaProto::NavData::PUserBlockType >(type_);
}
inline void PBlockArea::set_type(::ZimaProto::NavData::PUserBlockType value) {
  
  type_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.type)
}

// string map_value = 4;
inline void PBlockArea::clear_map_value() {
  map_value_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PBlockArea::map_value() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.map_value)
  return map_value_.GetNoArena();
}
inline void PBlockArea::set_map_value(const ::std::string& value) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PBlockArea.map_value)
}
#if LANG_CXX11
inline void PBlockArea::set_map_value(::std::string&& value) {
  
  map_value_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PBlockArea.map_value)
}
#endif
inline void PBlockArea::set_map_value(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PBlockArea.map_value)
}
inline void PBlockArea::set_map_value(const char* value, size_t size) {
  
  map_value_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PBlockArea.map_value)
}
inline ::std::string* PBlockArea::mutable_map_value() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PBlockArea.map_value)
  return map_value_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PBlockArea::release_map_value() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PBlockArea.map_value)
  
  return map_value_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PBlockArea::set_allocated_map_value(::std::string* map_value) {
  if (map_value != NULL) {
    
  } else {
    
  }
  map_value_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), map_value);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PBlockArea.map_value)
}

// repeated .ZimaProto.Map.PMapPoint points = 5;
inline int PBlockArea::points_size() const {
  return points_.size();
}
inline void PBlockArea::clear_points() {
  points_.Clear();
}
inline const ::ZimaProto::Map::PMapPoint& PBlockArea::points(int index) const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PBlockArea.points)
  return points_.Get(index);
}
inline ::ZimaProto::Map::PMapPoint* PBlockArea::mutable_points(int index) {
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PBlockArea.points)
  return points_.Mutable(index);
}
inline ::ZimaProto::Map::PMapPoint* PBlockArea::add_points() {
  // @@protoc_insertion_point(field_add:ZimaProto.NavData.PBlockArea.points)
  return points_.Add();
}
inline ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >*
PBlockArea::mutable_points() {
  // @@protoc_insertion_point(field_mutable_list:ZimaProto.NavData.PBlockArea.points)
  return &points_;
}
inline const ::google::protobuf::RepeatedPtrField< ::ZimaProto::Map::PMapPoint >&
PBlockArea::points() const {
  // @@protoc_insertion_point(field_list:ZimaProto.NavData.PBlockArea.points)
  return points_;
}

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// PNavData

// uint32 index = 1;
inline void PNavData::clear_index() {
  index_ = 0u;
}
inline ::google::protobuf::uint32 PNavData::index() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.index)
  return index_;
}
inline void PNavData::set_index(::google::protobuf::uint32 value) {
  
  index_ = value;
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PNavData.index)
}

// .ZimaProto.Map.PMultiLayerCharGridMap2D nav_map = 2;
inline bool PNavData::has_nav_map() const {
  return this != internal_default_instance() && nav_map_ != NULL;
}
inline void PNavData::clear_nav_map() {
  if (GetArenaNoVirtual() == NULL && nav_map_ != NULL) delete nav_map_;
  nav_map_ = NULL;
}
inline const ::ZimaProto::Map::PMultiLayerCharGridMap2D& PNavData::nav_map() const {
  const ::ZimaProto::Map::PMultiLayerCharGridMap2D* p = nav_map_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.nav_map)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PMultiLayerCharGridMap2D*>(
      &::ZimaProto::Map::_PMultiLayerCharGridMap2D_default_instance_);
}
inline ::ZimaProto::Map::PMultiLayerCharGridMap2D* PNavData::mutable_nav_map() {
  
  if (nav_map_ == NULL) {
    nav_map_ = new ::ZimaProto::Map::PMultiLayerCharGridMap2D;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.nav_map)
  return nav_map_;
}
inline ::ZimaProto::Map::PMultiLayerCharGridMap2D* PNavData::release_nav_map() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.nav_map)
  
  ::ZimaProto::Map::PMultiLayerCharGridMap2D* temp = nav_map_;
  nav_map_ = NULL;
  return temp;
}
inline void PNavData::set_allocated_nav_map(::ZimaProto::Map::PMultiLayerCharGridMap2D* nav_map) {
  delete nav_map_;
  nav_map_ = nav_map;
  if (nav_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.nav_map)
}

// .ZimaProto.Map.PSlamValueGridMap2D slam_map = 3;
inline bool PNavData::has_slam_map() const {
  return this != internal_default_instance() && slam_map_ != NULL;
}
inline void PNavData::clear_slam_map() {
  if (GetArenaNoVirtual() == NULL && slam_map_ != NULL) delete slam_map_;
  slam_map_ = NULL;
}
inline const ::ZimaProto::Map::PSlamValueGridMap2D& PNavData::slam_map() const {
  const ::ZimaProto::Map::PSlamValueGridMap2D* p = slam_map_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.slam_map)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::Map::PSlamValueGridMap2D*>(
      &::ZimaProto::Map::_PSlamValueGridMap2D_default_instance_);
}
inline ::ZimaProto::Map::PSlamValueGridMap2D* PNavData::mutable_slam_map() {
  
  if (slam_map_ == NULL) {
    slam_map_ = new ::ZimaProto::Map::PSlamValueGridMap2D;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.slam_map)
  return slam_map_;
}
inline ::ZimaProto::Map::PSlamValueGridMap2D* PNavData::release_slam_map() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.slam_map)
  
  ::ZimaProto::Map::PSlamValueGridMap2D* temp = slam_map_;
  slam_map_ = NULL;
  return temp;
}
inline void PNavData::set_allocated_slam_map(::ZimaProto::Map::PSlamValueGridMap2D* slam_map) {
  delete slam_map_;
  slam_map_ = slam_map;
  if (slam_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.slam_map)
}

// .ZimaProto.ProbabilityMap.PProbabilityIndexGridMap2D probability_map = 4;
inline bool PNavData::has_probability_map() const {
  return this != internal_default_instance() && probability_map_ != NULL;
}
inline void PNavData::clear_probability_map() {
  if (GetArenaNoVirtual() == NULL && probability_map_ != NULL) delete probability_map_;
  probability_map_ = NULL;
}
inline const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D& PNavData::probability_map() const {
  const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* p = probability_map_;
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.probability_map)
  return p != NULL ? *p : *reinterpret_cast<const ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D*>(
      &::ZimaProto::ProbabilityMap::_PProbabilityIndexGridMap2D_default_instance_);
}
inline ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* PNavData::mutable_probability_map() {
  
  if (probability_map_ == NULL) {
    probability_map_ = new ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D;
  }
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.probability_map)
  return probability_map_;
}
inline ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* PNavData::release_probability_map() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.probability_map)
  
  ::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* temp = probability_map_;
  probability_map_ = NULL;
  return temp;
}
inline void PNavData::set_allocated_probability_map(::ZimaProto::ProbabilityMap::PProbabilityIndexGridMap2D* probability_map) {
  delete probability_map_;
  probability_map_ = probability_map;
  if (probability_map) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.probability_map)
}

// string slam_map_filename = 5;
inline void PNavData::clear_slam_map_filename() {
  slam_map_filename_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& PNavData::slam_map_filename() const {
  // @@protoc_insertion_point(field_get:ZimaProto.NavData.PNavData.slam_map_filename)
  return slam_map_filename_.GetNoArena();
}
inline void PNavData::set_slam_map_filename(const ::std::string& value) {
  
  slam_map_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:ZimaProto.NavData.PNavData.slam_map_filename)
}
#if LANG_CXX11
inline void PNavData::set_slam_map_filename(::std::string&& value) {
  
  slam_map_filename_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:ZimaProto.NavData.PNavData.slam_map_filename)
}
#endif
inline void PNavData::set_slam_map_filename(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  slam_map_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:ZimaProto.NavData.PNavData.slam_map_filename)
}
inline void PNavData::set_slam_map_filename(const char* value, size_t size) {
  
  slam_map_filename_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:ZimaProto.NavData.PNavData.slam_map_filename)
}
inline ::std::string* PNavData::mutable_slam_map_filename() {
  
  // @@protoc_insertion_point(field_mutable:ZimaProto.NavData.PNavData.slam_map_filename)
  return slam_map_filename_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* PNavData::release_slam_map_filename() {
  // @@protoc_insertion_point(field_release:ZimaProto.NavData.PNavData.slam_map_filename)
  
  return slam_map_filename_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void PNavData::set_allocated_slam_map_filename(::std::string* slam_map_filename) {
  if (slam_map_filename != NULL) {
    
  } else {
    
  }
  slam_map_filename_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), slam_map_filename);
  // @@protoc_insertion_point(field_set_allocated:ZimaProto.NavData.PNavData.slam_map_filename)
}

// map<string, .ZimaProto.NavData.PRoomInfo> rooms_info = 6;
inline int PNavData::rooms_info_size() const {
  return rooms_info_.size();
}
inline void PNavData::clear_rooms_info() {
  rooms_info_.Clear();
}
inline const ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >&
PNavData::rooms_info() const {
  // @@protoc_insertion_point(field_map:ZimaProto.NavData.PNavData.rooms_info)
  return rooms_info_.GetMap();
}
inline ::google::protobuf::Map< ::std::string, ::ZimaProto::NavData::PRoomInfo >*
PNavData::mutable_rooms_info() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.NavData.PNavData.rooms_info)
  return rooms_info_.MutableMap();
}

// map<uint32, .ZimaProto.NavData.PVirtualWall> virtual_walls = 7;
inline int PNavData::virtual_walls_size() const {
  return virtual_walls_.size();
}
inline void PNavData::clear_virtual_walls() {
  virtual_walls_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >&
PNavData::virtual_walls() const {
  // @@protoc_insertion_point(field_map:ZimaProto.NavData.PNavData.virtual_walls)
  return virtual_walls_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PVirtualWall >*
PNavData::mutable_virtual_walls() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.NavData.PNavData.virtual_walls)
  return virtual_walls_.MutableMap();
}

// map<uint32, .ZimaProto.NavData.PBlockArea> block_areas = 8;
inline int PNavData::block_areas_size() const {
  return block_areas_.size();
}
inline void PNavData::clear_block_areas() {
  block_areas_.Clear();
}
inline const ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >&
PNavData::block_areas() const {
  // @@protoc_insertion_point(field_map:ZimaProto.NavData.PNavData.block_areas)
  return block_areas_.GetMap();
}
inline ::google::protobuf::Map< ::google::protobuf::uint32, ::ZimaProto::NavData::PBlockArea >*
PNavData::mutable_block_areas() {
  // @@protoc_insertion_point(field_mutable_map:ZimaProto.NavData.PNavData.block_areas)
  return block_areas_.MutableMap();
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
#endif  // !PROTOBUF_INLINE_NOT_IN_HEADERS
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)


}  // namespace NavData
}  // namespace ZimaProto

namespace google {
namespace protobuf {

template <> struct is_proto_enum< ::ZimaProto::NavData::PUserBlockType> : ::google::protobuf::internal::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor< ::ZimaProto::NavData::PUserBlockType>() {
  return ::ZimaProto::NavData::PUserBlockType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_zima_2fproto_2fnav_5fdata_2eproto__INCLUDED
